# ============================================================================
# Restore Configuration Example
# ============================================================================
# Copy this file to restore.ini and customize for your restore operation.
# Note: If restore.ini is not found, the system will fall back to backup.ini
# and you can specify restore-specific settings via command-line arguments.

[restore]
# REQUIRED: Archive to restore
# Can be:
#  - Local path: /path/to/backup-2025-01-15.tar.gz (or relative to backup_dir below)
#  - S3 key: backup-2025-01-15.tar.gz (if source=s3 or auto)
#  - SSH remote path: backup-2025-01-15.tar.gz (if source=ssh or auto)
archive = waldiez_runner-20251005T135819Z.tar.gz

# Optional: Local directory where backups are stored
backup_dir = ./.local/backups

# Where to fetch the archive from: local | s3 | ssh
# - local: archive is a local filesystem path
# - s3: fetch from S3 bucket configured in [transport.s3]
# - ssh: fetch from SSH remote configured in [transport.ssh]
source = local

# Restore strategy: select | all
# - select: restore only what's configured below (restore_files, etc.)
# - all: restore everything in the archive regardless of settings
strategy = select

# Selective restore toggles (only used when strategy = select)
# Leave blank/unset to use defaults from [backup] section
# Set explicitly to override
restore_files = true
restore_postgres = true
restore_redis = true

# Optional: Local staging directory for downloaded/extracted archives
# If not set, a temporary directory will be created
staging_dir =

# Dry run mode - log actions without executing them
dry_run = false

# ----------------------------------------------------------------------------
# Webhook for notification on success/failure (same as backup.ini)
# ----------------------------------------------------------------------------
[notify]
webhook_url =
# e.g. X-Auth: ${WEBHOOK_TOKEN}, Authorization: 'Bearer ${WEBHOOK_TOKEN}'
headers =
notify_on_success = false
notify_on_failure = true

# ----------------------------------------------------------------------------
# Container Runtime (same as backup.ini)
# ----------------------------------------------------------------------------
[runtime]
container_command = auto

# ----------------------------------------------------------------------------
# Transport Configuration (same as backup.ini)
# ----------------------------------------------------------------------------
# These settings tell the restore script where to fetch archives from
# You typically copy these from backup.ini

[transport]
type = none
mode = retain

[transport.s3]
bucket = my-backup-bucket
prefix = backups/waldiez_runner
aws_profile = default
aws_region = us-east-1
object_tags =

[transport.ssh]
dest = backup-user@backup.example.com:/backups/waldiez
port = 22
rsync_opts = -az --partial --inplace
prune_cmd =

# ----------------------------------------------------------------------------
# Destination Configuration
# ----------------------------------------------------------------------------
# These sections define WHERE to restore data
# The section names must match those in backup.ini

[files:container_data]
mode = container
container = waldiez-runner-dev
# path in container
path = /home/waldiez/app/waldiez_runner/storage
# Optional: comma-or newline-separated exclude patterns
exclude =
    *.log
    *.tmp
    __pycache__/
    .venv/
    .local/
    *cache/

# Example: Container volume backup
# for redis, we probably don't need all /data,
# see redis below to only get dump.rdb
; [files:redis_data]
; mode = container
; container = waldiez-runner-redis-dev
; path = /data
; exclude = dump.rdb, *.rdb, appendonly.aof*, *.aof

# ----------------------------------------------------------------------------
# PostgreSQL Sources
# ----------------------------------------------------------------------------
# Section format: [postgres:name]
# Passwords can be set via PG_PASSWORD_{NAME} environment variable
# where {NAME} is the section name in uppercase
[postgres:main]
container = waldiez-runner-db-dev
user = db_user
database = db_name
# Password in ini (or use env var PG_PASSWORD_MAIN)
password = db_password
# Optional: additional pg_dump flags
dump_extras = --no-owner --no-acl --clean --if-exists --single-transaction

# ----------------------------------------------------------------------------
# Redis Sources
# ----------------------------------------------------------------------------
# Section format: [redis:name]
# Passwords can be set via REDIS_PASSWORD_{NAME} environment variable

[redis:cache]
container = waldiez-runner-redis-dev
# Password in ini (or use env var REDIS_PASSWORD_CACHE)
password = redis_password
# RDB filename inside container
rdb_name = dump.rdb

# ----------------------------------------------------------------------------
# Common Restore Scenarios
# ----------------------------------------------------------------------------

# Scenario 1: Restore from local backup
# [restore]
# archive = /backups/backup-2025-01-15.tar.gz
# source = local
# strategy = all

# Scenario 2: Restore specific components from S3
# [restore]
# archive = backup-2025-01-15.tar.gz
# source = s3
# strategy = select
# restore_files = false
# restore_postgres = true
# restore_redis = false

# Scenario 3: Restore everything from ssh
# [restore]
# archive = backup-2025-01-15.tar.gz
# source = ssh
# strategy = all
