{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#waldiez-runner","title":"Waldiez Runner","text":"<p>Waldiez Runner is a server that executes Waldiez flows in isolated environments (Python virtualenvs or containers), streams logs and input/output over Redis, and provides a full API for managing tasks and clients.</p> <p>Built with:</p> <ul> <li>Waldiez + ag2 + FastStream for isolated flow execution and streaming</li> <li>FastAPI for the API</li> <li>Taskiq for async task management</li> <li>Redis for message and log streaming</li> <li>PostgreSQL for task/client persistence</li> </ul> <p> </p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Push-to-execute agent/task flows via HTTP</li> <li>Live I/O and user interaction over WebSocket or HTTP</li> <li>Multi-audience token-based authentication</li> <li>Local or containerized dev setups</li> <li>Easily extensible for S3/GCS, OIDC, hybrid queueing, and more</li> </ul> <p>\ud83d\udc49 Head over to Getting Started to run your first task!</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#architecture","title":"Architecture","text":"<p>Waldiez Runner orchestrates the execution of Waldiez flows in isolated environments (e.g. virtualenvs), with full support for live input/output streaming and task management via HTTP or WebSocket.</p> <p>It uses a modular architecture composed of:</p> Component Description FastAPI HTTP API for tasks, inputs, clients, and authentication Taskiq Asynchronous job runner (background task execution) FastStream Executes uploaded app in a new virtualenv Redis Handles message passing (logs, prompts, responses) PostgreSQL Persists task and client state WebSocket Real-time input/output interface for tasks"},{"location":"architecture/#system-overview","title":"System Overview","text":"<pre><code>graph TD\n  A[Client] --&gt;|HTTP| B[FastAPI]\n  A --&gt;|WebSocket| G[WebSocket Router]\n\n  B --&gt;|Enqueue Task| C[Taskiq Worker]\n  B --&gt;|Store Task| D[PostgreSQL]\n  B --&gt;|Save File| F[Storage]\n\n  C --&gt;|Run App| H[FastStream + Waldiez + Ag2]\n  C --&gt;|Update Status| D\n\n  H --&gt;|Input/Output + Status| E[Redis]\n\n  G --&gt;|Subscribe + Publish| E\n\n  subgraph Virtualenv\n    H\n  end\n\n  subgraph Dev Environment\n    B\n    C\n    G\n    D\n    E\n    F\n  end\n</code></pre>"},{"location":"architecture/#redis-io-and-status-channels","title":"Redis I/O and Status Channels","text":"<p>Tasks use <code>RedisIOStream</code> an extension to ag2's IOStream to stream logs and request input. This includes:</p> <ul> <li>Output:<ul> <li><code>task:{task_id}:output</code>: per-task stream</li> <li><code>task-output</code>: global stream for all task messages</li> </ul> </li> <li>Input:<ul> <li><code>task:{task_id}:input_request</code>: prompt user input</li> <li><code>task:{task_id}:input_response</code>: receive user reply</li> </ul> </li> <li>Control:<ul> <li>t<code>ask:{task_id}:status</code>: used by the runner to react to cancel requests and broadcast lifecycle events (running, completed, failed, etc.)</li> </ul> </li> </ul>"},{"location":"architecture/#execution-flow","title":"Execution Flow","text":"<p>The diagram below illustrates how the system handles a full task lifecycle \u2014 from submission to completion.</p> <pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant FastStream\n    participant TaskiqWorker\n    participant Redis\n    participant DB\n    participant Storage\n    participant WebSocket\n    participant AppInVenv\n\n    Client-&gt;&gt;API: POST /api/v1/tasks\n    API-&gt;&gt;DB: Create task\n    API-&gt;&gt;Storage: Save uploaded file\n    API-&gt;&gt;TaskiqWorker: Enqueue job\n\n    TaskiqWorker-&gt;&gt;Storage: Create venv and copy app files\n    TaskiqWorker-&gt;&gt;DB: Update task status to running\n    TaskiqWorker-&gt;&gt;AppInVenv: Start subprocess\n\n    loop Task execution\n        AppInVenv-&gt;&gt;FastStream: Publish input_request\n        FastStream-&gt;&gt;Redis: task:{task_id}:input_request\n\n        alt User responds\n            Redis--&gt;&gt;FastStream: task:{task_id}:input_response\n            FastStream--&gt;&gt;AppInVenv: Deliver input\n        else Timeout\n            AppInVenv--&gt;&gt;FastStream: Use default input\n        end\n\n        AppInVenv-&gt;&gt;FastStream: Publish output\n        FastStream-&gt;&gt;Redis: Stream to task:{task_id}:output and task-output\n    end\n\n    opt WebSocket\n        Client-&gt;&gt;WebSocket: Connect to /ws/{task_id}\n        WebSocket-&gt;&gt;Redis: Read from task:{task_id}:output\n        Redis--&gt;&gt;WebSocket: Forward output or input_request\n        Client--&gt;&gt;WebSocket: Send input\n        WebSocket-&gt;&gt;Redis: task:{task_id}:input_response\n    end\n\n    opt HTTP Input\n        Client-&gt;&gt;API: POST /api/v1/tasks/{task_id}/input\n        API-&gt;&gt;Redis: task:{task_id}:input_response\n    end\n\n    alt Task completes/fails/cancelled\n        TaskiqWorker-&gt;&gt;DB: Update task status\n        TaskiqWorker-&gt;&gt;Storage: Move results and clean up\n    end\n</code></pre>"},{"location":"clients/","title":"Clients & Auth","text":""},{"location":"clients/#clients-authentication","title":"Clients &amp; Authentication","text":"<p>Waldiez Runner uses a client-based authentication system powered by JWT tokens. All interactions with the API or WebSocket require a valid token linked to a specific audience.</p>"},{"location":"clients/#audiences","title":"\ud83c\udfad Audiences","text":"<p>There are two types of clients, each associated with a specific audience:</p> Audience Description Scope <code>clients-api</code> Manages other clients <code>/api/v1/clients/*</code> <code>tasks-api</code> Submits and interacts with tasks <code>/api/v1/tasks/*</code>, <code>/ws/{task_id}</code>"},{"location":"clients/#clientsjson","title":"\ud83d\udcc2 <code>clients.json</code>","text":"<p>Upon first startup (or running <code>initial_data.py</code>), a file named <code>clients.json</code> is generated in the project root. It contains initial client credentials for both audiences.</p> <pre><code>[\n  {\n    \"id\": \"...\",\n    \"client_id\": \"...\",\n    \"client_secret\": \"...\",\n    \"audience\": \"clients-api\",\n    \"description\": \"Clients management API\"\n  },\n  {\n    \"id\": \"...\",\n    \"client_id\": \"...\",\n    \"client_secret\": \"...\",\n    \"audience\": \"tasks-api\",\n    \"description\": \"Tasks management API\"\n  }\n]\n</code></pre> <p>Note</p> <p>You\u2019ll need the tasks-api credentials to:</p> <ul> <li>Use the example UI at http://localhost</li> <li>Submit or manage tasks via Swagger or scripts</li> </ul>"},{"location":"clients/#token-endpoints","title":"\ud83d\udd10 Token Endpoints","text":"<p>You can request or refresh a token using the <code>/auth</code> routes.</p>"},{"location":"clients/#post-authtoken","title":"\ud83d\udd38 <code>POST /auth/token</code>","text":"<p>Request an access + refresh token.</p> <p>Form data (<code>application/x-www-form-urlencoded</code>):</p> <pre><code>client_id=...\nclient_secret=...\n</code></pre> <p>Example response:</p> <pre><code>{\n    \"access_token\": \"...\",\n    \"refresh_token\": \"...\",\n    \"token_type\": \"Bearer\",\n    \"expires_at\": \"...\",\n    \"refresh_expires_at\": \"...\",\n    \"audience\": \"tasks-api\"\n}\n</code></pre>"},{"location":"clients/#post-authrefresh","title":"\ud83d\udd04 <code>POST /auth/refresh</code>","text":"<p>Use your <code>refresh_token</code> to renew your tokens.</p> <p>JSON body:</p> <pre><code>{\n    \"refresh_token\": \"...\",\n    \"audience\": \"tasks-api\" // optional\n}\n</code></pre>"},{"location":"clients/#authenticating-requests","title":"\ud83d\udce1 Authenticating Requests","text":"<p>Pass the token in your <code>Authorization</code> header:</p> <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre> <p>This is required for:</p> <ul> <li>All <code>/api/v1/*</code> endpoints</li> <li>WebSocket access (<code>/ws/{task_id}</code>)</li> </ul>"},{"location":"clients/#websocket-authentication-options","title":"\ud83d\udd0c WebSocket Authentication Options","text":"<p>You can authenticate WebSocket connections via:</p> Method Example Use Case Header <code>Authorization: Bearer &lt;token&gt;</code> Best for Python clients Subprotocol <code>task-api,&lt;token&gt;</code> Recommended for JS Cookie <code>access_token=&lt;token&gt;</code> Used in browser-based UIs Query Param <code>/ws/{task_id}?access_token=...</code> Fallback only (less secure) <p>More info: websockets authentication</p>"},{"location":"clients/#managing-clients","title":"\ud83e\uddea Managing Clients","text":"<p>To create or delete clients, use the <code>clients-api</code> token:</p> <ul> <li><code>POST /api/v1/clients</code> \u2014 create new client</li> <li><code>GET /api/v1/clients</code> \u2014 list all clients</li> <li><code>DELETE /api/v1/clients/{client_id}</code> \u2014 remove a client</li> </ul> <p>Only tokens issued for the <code>clients-api</code> audience have access to these routes.</p>"},{"location":"clients/#where-its-used","title":"Where It\u2019s Used","text":"<ul> <li>\ud83d\udd10 The example UI (<code>examples/plain/</code>) requires a <code>tasks-api</code> client to authenticate.</li> <li>\ud83d\udd27 Swagger UI supports authentication via the lock icon (<code>/docs</code>).</li> <li>\ud83e\uddea All scripts or test clients should load their credentials from <code>clients.json</code>.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>Follow these steps to get Waldiez Runner up and running in your development environment.</p>"},{"location":"getting-started/#quickstart-dockerpodman-compose","title":"\ud83d\udc33 Quickstart (Docker/Podman Compose)","text":"<p>To launch the full development stack (API + Redis + Postgres + Nginx):</p> <p>Note</p> <p>This could take some minutes on the first run, as it installs all dependencies.</p> <pre><code>docker compose -f compose.dev.yaml up --build\n</code></pre> <p>This setup includes:</p> <ul> <li>API server (waldiez-runner)</li> <li>Redis + PostgreSQL</li> <li>Taskiq worker + scheduler</li> <li>Nginx reverse proxy</li> <li>A simple static example in <code>examples/plain</code></li> </ul> <p>Once started, you can access:</p> <ul> <li>Static example UI: http://localhost</li> <li>API: http://localhost/docs (Swagger UI)</li> </ul> <p> </p> <p>Note</p> <p>Alternatively, you can open this project in VS Code with Dev Containers enabled \u2014 it uses most of the services (not nginx) via .devcontainer/compose.yaml.</p>"},{"location":"getting-started/#authenticating-with-the-api-or-example-ui","title":"\ud83d\udd11 Authenticating with the API or Example UI","text":"<p>When the server starts, it automatically generates a <code>clients.json</code> file in the project root. This file contains two API clients:</p> <ul> <li>One for the <code>clients-api</code> audience (managing clients)</li> <li>One for the <code>tasks-api</code> audience (creating and interacting with tasks)</li> </ul> <p>You'll need the <code>tasks-api</code> credentials to:</p> <ul> <li>Use the Swagger UI (try out endpoints under <code>/api/v1/tasks</code>)</li> <li>Submit tasks via curl or HTTP clients</li> <li>Use the example UI at http://localhost</li> </ul> <p>Info</p> <p>On the example page, you\u2019ll be asked to paste the base URL, client ID, and secret. Use the values from <code>clients.json</code> (specifically the <code>tasks-api</code> entry).</p> <p>\ud83d\udd10 See Clients &amp; Authentication for more details.</p>"},{"location":"getting-started/#local-mode-advanced","title":"\ud83e\uddea Local Mode (Advanced)","text":"<p>You can also run the server without any external dependencies (Redis/Postgres):</p> <ul> <li>SQLite for storage</li> <li>FakeRedis for message streams</li> </ul> <pre><code>make dev-no-reload\n</code></pre> <p>Warning</p> <p>Do expect limitations in this mode, [Fake]Redis messages might not work as expected.</p> <p>Or manually (what <code>make dev-no-reload</code> does):</p> <pre><code># drop all tables and remove the .env file if it exists\npython scripts/drop.py\n# switch to local mode if not already\npython scripts/toggle.py --mode local\n# make sure the .env file is created and the database is initialized\npython scripts/pre_start.py --dev\n# make sure the first two Clients are created\npython scripts/initial_data.py --dev\n# start the server, the broker and the scheduler\npython -m waldiez_runner --trusted-origins http://localhost:3000,http://localhost:8000 --trusted-hosts localhost --debug --no-force-ssl --no-redis --no-postgres --dev --all\n</code></pre> <p>You can now either use the Swagger UI at http://localhost:8000/docs or you can also serve the example on another port terminal:</p> <pre><code>cd examples/plain\npython -m http.server 3000\n</code></pre> <p>Calling <code>python -m http.server</code> will start a simple HTTP server on port 3000, serving the files in the current directory. You can now access the example UI at http://localhost:3000.</p>"},{"location":"getting-started/#submitting-and-managing-tasks","title":"\ud83d\udce4 Submitting and Managing Tasks","text":"<p>Once the server is running, you can create and interact with tasks:</p> <ul> <li>Submit a task by uploading a <code>.waldiez</code> file via:<ul> <li>the example UI at http://localhost</li> <li>or the Swagger UI at http://localhost/docs (<code>POST /api/v1/tasks</code>)</li> </ul> </li> </ul> <ul> <li>Monitor task progress via:<ul> <li>the Swagger <code>GET /api/v1/tasks/{task_id}</code></li> <li>or the WebSocket endpoint <code>/ws/{task_id}</code> (see WebSocket)</li> </ul> </li> </ul> <ul> <li>Send input if the task requests it:<ul> <li>Use the input box in the example UI</li> <li>Or call <code>POST /api/v1/tasks/{task_id}/input</code></li> </ul> </li> </ul> <ul> <li>Cancel or delete tasks using:<ul> <li><code>POST /api/v1/tasks/{task_id}/cancel</code></li> <li><code>DELETE /api/v1/tasks/{task_id}</code></li> </ul> </li> </ul> <p>You can explore all available routes via the interactive API docs at <code>/docs</code>.</p> <p>\ud83d\udd0e For more details, check the Tasks section.</p>"},{"location":"tasks/","title":"Tasks","text":""},{"location":"tasks/#tasks","title":"Tasks","text":"<p>Waldiez Runner provides a set of HTTP endpoints to manage, run, and interact with tasks. All routes are under the /api/v1/tasks path and require a valid JWT token with tasks-api audience.</p>"},{"location":"tasks/#list-all-tasks","title":"\ud83d\udcc4 List All Tasks","text":"<p>GET /api/v1/tasks</p> <p>Returns a paginated list of all tasks for the current client.</p> <p>Query Parameters (optional, for pagination):</p> <ul> <li>page (default: 1)</li> <li>size (default: 50)</li> </ul> <p>Response: Page[TaskResponse]</p>"},{"location":"tasks/#create-a-new-task","title":"\ud83d\udce5 Create a New Task","text":"<p>POST /api/v1/tasks</p> <p>Uploads a .waldiez flow and creates a new task. Limited to 3 concurrent tasks per client.</p> <p>Form Data:</p> <ul> <li>file: The .waldiez file (required)</li> <li>input_timeout: Timeout for input requests (default: 180 seconds)</li> </ul> <p>Response: TaskResponse</p> <p>Error: 429 if the task limit is exceeded.</p>"},{"location":"tasks/#get-task-by-id","title":"\ud83d\udcc4 Get Task by ID","text":"<p>GET /api/v1/tasks/{task_id}</p> <p>Returns metadata about the specified task.</p> <p>Response: TaskResponse</p>"},{"location":"tasks/#send-input-to-task","title":"\ud83c\udfa4 Send Input to Task","text":"<p>POST /api/v1/tasks/{task_id}/input</p> <p>Send a response to an active input_request.</p> <p>Request Body:</p> <pre><code>{\n  \"request_id\": \"uuid-string\",\n  \"data\": \"your input message\"\n}\n</code></pre> <p>Response: 204 No Content</p> <p>Error Conditions:</p> <ul> <li>Invalid task ID or client</li> <li>Task is not waiting for input</li> <li>request_id does not match the active prompt</li> </ul>"},{"location":"tasks/#download-task-results","title":"\u2b07\ufe0f Download Task Results","text":"<p>GET /api/v1/tasks/{task_id}/download</p> <p>Downloads a .zip archive with task outputs.</p> <p>Response: FileResponse or StreamingResponse</p>"},{"location":"tasks/#cancel-task","title":"\ud83d\udeab Cancel Task","text":"<p>POST /api/v1/tasks/{task_id}/cancel</p> <p>Cancels a running or waiting task.</p> <p>Response: Updated TaskResponse</p> <p>Error: 400 if task is already finished or cannot be cancelled</p>"},{"location":"tasks/#delete-a-task","title":"\ud83e\uddf9 Delete a task","text":"<p>DELETE /api/v1/tasks/{task_id}</p> <p>Soft-deletes (schedules full deletion task including all its files and entries in db) a task. Active tasks require force=true to be deleted.</p> <p>Query Parameters:</p> <ul> <li>force: true to delete even active tasks</li> </ul> <p>Response: 204 No Content</p>"},{"location":"tasks/#delete-all-tasks","title":"\ud83e\udde8 Delete All Tasks","text":"<p>DELETE /api/v1/tasks</p> <p>Soft-deletes all tasks for the current client. By default, only completed/cancelled tasks are deleted. Use force=true to delete active ones.</p> <p>Query Parameters:</p> <ul> <li>force: true to also delete active tasks</li> </ul> <p>Response: 204 No Content</p> <p>Warning</p> <ul> <li>Clients can only have up to 3 concurrent active tasks (pending, running, waiting_for_input).</li> <li>Input timeout can be configured per task.</li> <li>Input messages must match the expected request_id.</li> <li>Deleted tasks are soft-deleted and hidden from future listings.</li> </ul> <p>See also:</p> <ul> <li>Authentication</li> <li>Live Input/Output</li> </ul>"},{"location":"websocket/","title":"WebSocket","text":""},{"location":"websocket/#websocket-api","title":"WebSocket API","text":"<p>Waldiez Runner supports live task interaction via WebSocket \u2014 enabling real-time logs, prompts, and input responses.</p>"},{"location":"websocket/#endpoint","title":"\ud83d\udee3\ufe0f Endpoint","text":"<p><code>/ws/{task_id}</code></p> <ul> <li>Requires a valid JWT token with the <code>tasks-api</code> audience</li> <li>Only works while the task is running or waiting for input</li> </ul>"},{"location":"websocket/#authentication-options","title":"\ud83d\udd10 Authentication Options","text":"<p>You can authenticate your WebSocket connection in any of the following ways:</p> Method Example Recommended for Header <code>Authorization: Bearer &lt;token&gt;</code> Python clients Subprotocol <code>task-api,&lt;token&gt;</code> JavaScript clients Cookie <code>access_token=&lt;token&gt;</code> Browser UIs Query Param <code>/ws/{task_id}?access_token=...</code> Fallback only <p>\ud83d\udd10 For info on getting tokens: see Clients &amp; Authentication</p>"},{"location":"websocket/#message-format","title":"\ud83d\udd01 Message Format","text":"<p>All messages are JSON objects with the following schema:</p> <pre><code>{\n  \"type\": \"print | input_request | input_response | termination\",\n  \"task_id\": \"abc123\",\n  \"timestamp\": 1711210101210,\n  \"data\": \"Message string or structured content\",\n  \"request_id\": \"uuid (optional)\",\n  \"password\": \"string (optional, only in input_request)\"\n}\n</code></pre>"},{"location":"websocket/#receiving-messages","title":"\ud83d\udce4 Receiving Messages","text":"<p>You may receive:</p> <ul> <li><code>type: \"print\"</code> \u2192 A log or output line from the task</li> <li><code>type: \"input_request\"</code> \u2192 A prompt requesting user input</li> <li><code>type: \"termination\"</code> \u2192 Signals end of task or current turn</li> </ul>"},{"location":"websocket/#sending-input","title":"\ud83c\udfa4 Sending Input","text":"<p>To respond to a prompt:</p> <pre><code>{\n  \"type\": \"input_response\",\n  \"task_id\": \"abc123\",\n  \"request_id\": \"same-as-request\",\n  \"timestamp\": 1711210111111,\n  \"data\": \"Your input\"\n}\n</code></pre> <p>\ud83e\udde0 <code>request_id</code> must match the one from the latest <code>input_request</code>!</p>"},{"location":"websocket/#use-cases","title":"\u2699\ufe0f Use Cases","text":"<ul> <li>Stream task logs to a UI</li> <li>Handle human-in-the-loop flows</li> <li>Use WebSocket for fast feedback vs polling</li> <li>Match input/output easily using <code>request_id</code></li> </ul>"},{"location":"websocket/#example-ui","title":"\ud83e\uddea Example UI","text":"<p>Try it at http://localhost using the <code>tasks-api</code> credentials from <code>clients.json</code>.</p> <p>See the source in <code>examples/plain/static/js/lib/ws.js</code>.</p>"},{"location":"websocket/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>Tasks</li> <li>Clients &amp; Authentication</li> <li>Getting Started</li> </ul>"}]}