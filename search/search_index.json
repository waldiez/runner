{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#waldiez-runner","title":"Waldiez Runner","text":"<p>Waldiez Runner is a server that executes Waldiez flows in isolated environments (Python virtualenvs or containers), streams logs and input/output over Redis, and provides a full API for managing tasks and clients.</p> <p>Built with:</p> <ul> <li>Waldiez + ag2 + FastStream for isolated flow execution and streaming</li> <li>FastAPI for the API</li> <li>Taskiq for async task management</li> <li>Redis for message and log streaming</li> <li>PostgreSQL for task/client persistence</li> </ul> <p> </p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Push-to-execute agent/task flows via HTTP</li> <li>Live I/O and user interaction over WebSocket or HTTP</li> <li>Multi-audience token-based authentication</li> <li>Local or containerized dev setups</li> <li>Easily extensible for S3/GCS, OIDC, hybrid queueing, and more</li> </ul> <p>\ud83d\udc49 Head over to Getting Started to run your first task!</p>"},{"location":"architecture/","title":"Architecture","text":"<p>Waldiez Runner uses a modular, event-driven orchestration architecture to execute multi-agent (Waldiez) flows in isolated environments (e.g. virtualenvs) with real-time input/output via Redis and WebSocket. It is composed of several components that work together to manage task execution, input/output handling, and result storage:</p> Component Description FastAPI HTTP API for tasks, inputs, clients, and authentication Taskiq Asynchronous job runner (background task execution) FastStream Executes uploaded app in a new virtualenv Redis Handles message passing (logs, prompts, responses) PostgreSQL Persists task and client state WebSocket Real-time input/output interface for tasks"},{"location":"architecture/#system-overview","title":"System Overview","text":"<pre><code>graph TD\n  %% ========== Client ==========\n  Client[\"\ud83e\uddd1\u200d\ud83d\udcbb Client &lt;br&gt;(Web / Python / CLI)\"] --&gt;|POST /tasks| FastAPI[\"\ud83d\ude80 FastAPI &lt;br&gt;(REST API)\"]\n  Client --&gt;|\"WebSocket /ws/{task_id}\"| WebSocket[\"\ud83d\udd0c WebSocket Endpoint\"]\n\n  %% ========== Task Triggering ==========\n  FastAPI --&gt;|Save .waldiez| Storage[\"\ud83d\udcc1 Storage\"]\n  FastAPI --&gt;|Create Task| DB[\"\ud83d\uddc3\ufe0f PostgreSQL\"]\n  FastAPI --&gt;|Enqueue Job| Redis[\"\ud83d\udce8 Redis &lt;br&gt;(Broker)\"]\n\n  Redis --&gt; Taskiq[\"\u2699\ufe0f Taskiq Worker\"]\n\n  %% ========== Task Execution ==========\n  Taskiq --&gt; |Setup venv + prepare app| FastStream[\"\u26a1 FastStream App\"]\n  FastStream --&gt;|Load flow| Waldiez[\"\ud83e\udde0 Waldiez &lt;br&gt;flow parser\"]\n  Waldiez --&gt;|Generate agents + code| AG2[\"\ud83e\uddec AG2 Execution\"]\n\n  AG2&lt;--&gt;|Print + Input| RedisIO[\"\ud83d\udce1 Redis &lt;br&gt;(Streams + PubSub)\"]\n\n  %% ========== WebSocket Interaction ==========\n  WebSocket &lt;--&gt;|Listen + respond to I/O| RedisIO\n\n  %% ========== Results Handling ==========\n  FastStream --&gt;|Send results| RedisResults[\"\ud83d\udce8 Redis &lt;br&gt;(Results backend)\"]\n  Taskiq --&gt;|Fetch results| RedisResults\n  Taskiq --&gt;|Save results| DB\n  Taskiq --&gt;|Upload outputs| Storage\n  Taskiq --&gt;|Cleanup venv| Cleanup[\"\ud83e\uddf9 Cleanup\"]\n\n  %% ========== Groupings ==========\n  subgraph \"API Layer\"\n    FastAPI\n    WebSocket\n  end\n\n  subgraph \"Task Manager\"\n    Taskiq\n    Redis\n    RedisResults\n    DB\n    Storage\n    Cleanup\n  end\n\n  subgraph \"Execution (Virtualenv)\"\n    RedisIO\n    FastStream\n    Waldiez\n    AG2\n  end</code></pre> <p>Note</p> <p>All Redis roles (task broker, result backend, and I/O streams) are within the same Redis container. The roles are separated for clarity and distinction:</p> <ol> <li>\ud83d\udd01 Task Broker (via Redis Queue):<ul> <li>Used by FastAPI &amp; Taskiq for job queueing.</li> </ul> </li> <li>\ud83e\udde0 Result Backend:<ul> <li>FastStream pushes final results here for Taskiq to fetch.</li> </ul> </li> <li>\ud83d\udce1 PubSub &amp; Streams:<ul> <li>Real-time I/O (prints + input requests) between AG2 \u2194 WebSocket.</li> </ul> </li> </ol>"},{"location":"architecture/#redis-io-and-status-channels","title":"Redis I/O and Status Channels","text":"<p>Tasks use <code>RedisIOStream</code> an extension to ag2's IOStream to stream logs and request input. This includes:</p> <ul> <li>Output:<ul> <li><code>task:{task_id}:output</code>: per-task stream</li> <li><code>task-output</code>: global stream for all task messages</li> </ul> </li> <li>Input:<ul> <li><code>task:{task_id}:input_request</code>: prompt user input</li> <li><code>task:{task_id}:input_response</code>: receive user reply</li> </ul> </li> <li>Control:<ul> <li><code>task:{task_id}:status</code>: used by the runner to react to cancel requests and broadcast lifecycle events (running, completed, failed, etc.)</li> </ul> </li> </ul>"},{"location":"architecture/#execution-flow","title":"Execution Flow","text":"<p>The diagram below illustrates how the system handles a full task lifecycle \u2014 from submission to completion.</p> <pre><code>sequenceDiagram\n    participant Client\n    participant API\n    participant FastStream\n    participant TaskiqWorker\n    participant Redis\n    participant DB\n    participant Storage\n    participant WebSocket\n    participant AppInVenv\n\n    Client-&gt;&gt;API: POST /api/v1/tasks\n    API-&gt;&gt;DB: Create task\n    API-&gt;&gt;Storage: Save uploaded file\n    API-&gt;&gt;TaskiqWorker: Enqueue job\n\n    TaskiqWorker-&gt;&gt;Storage: Create venv and copy app files\n    TaskiqWorker-&gt;&gt;DB: Update task status to running\n    TaskiqWorker-&gt;&gt;AppInVenv: Start subprocess\n\n    loop Task execution\n        AppInVenv-&gt;&gt;FastStream: Publish input_request\n        FastStream-&gt;&gt;Redis: task:{task_id}:input_request\n\n        alt User responds\n            Redis--&gt;&gt;FastStream: task:{task_id}:input_response\n            FastStream--&gt;&gt;AppInVenv: Deliver input\n        else Timeout\n            AppInVenv--&gt;&gt;FastStream: Use default input\n        end\n\n        AppInVenv-&gt;&gt;FastStream: Publish output\n        FastStream-&gt;&gt;Redis: Stream to task:{task_id}:output and task-output\n    end\n\n    opt WebSocket\n        Client-&gt;&gt;WebSocket: Connect to /ws/{task_id}\n        WebSocket-&gt;&gt;Redis: Read from task:{task_id}:output\n        Redis--&gt;&gt;WebSocket: Forward output or input_request\n        Client--&gt;&gt;WebSocket: Send input\n        WebSocket-&gt;&gt;Redis: task:{task_id}:input_response\n    end\n\n    opt HTTP Input\n        Client-&gt;&gt;API: POST /api/v1/tasks/{task_id}/input\n        API-&gt;&gt;Redis: task:{task_id}:input_response\n    end\n\n    alt Task completes/fails/cancelled\n        TaskiqWorker-&gt;&gt;DB: Update task status\n        TaskiqWorker-&gt;&gt;Storage: Move results and clean up\n    end</code></pre>"},{"location":"clients/","title":"Clients & Authentication","text":""},{"location":"clients/#clients-and-authentication","title":"Clients and Authentication","text":"<p>Waldiez Runner uses a client-based authentication system powered by JWT tokens. All interactions with the API or WebSocket require a valid token linked to a specific audience.</p>"},{"location":"clients/#audiences","title":"\ud83c\udfad Audiences","text":"<p>There are two types of clients, each associated with a specific audience:</p> Audience Description Scope <code>clients-api</code> Manages other clients <code>/api/v1/clients/*</code> <code>tasks-api</code> Submits and interacts with tasks <code>/api/v1/tasks/*</code>, <code>/ws/{task_id}</code>"},{"location":"clients/#clientsjson","title":"\ud83d\udcc2 <code>clients.json</code>","text":"<p>Upon first startup (or running <code>initial_data.py</code>), a file named <code>clients.json</code> is generated in the project root. It contains initial client credentials for both audiences.</p> <pre><code>[\n  {\n    \"id\": \"...\",\n    \"client_id\": \"...\",\n    \"client_secret\": \"...\",\n    \"audience\": \"clients-api\",\n    \"description\": \"Clients management API\"\n  },\n  {\n    \"id\": \"...\",\n    \"client_id\": \"...\",\n    \"client_secret\": \"...\",\n    \"audience\": \"tasks-api\",\n    \"description\": \"Tasks management API\"\n  }\n]\n</code></pre> <p>Note</p> <p>You\u2019ll need the tasks-api credentials to: - Use the example UI at http://localhost - Submit or manage tasks via Swagger or scripts</p>"},{"location":"clients/#token-endpoints","title":"\ud83d\udd10 Token Endpoints","text":"<p>You can request or refresh a token using the <code>/auth</code> routes.</p>"},{"location":"clients/#post-authtoken","title":"\ud83d\udd38 <code>POST /auth/token</code>","text":"<p>Request an access + refresh token.</p> <p>Form data (<code>application/x-www-form-urlencoded</code>):</p> <pre><code>client_id=...\nclient_secret=...\n</code></pre> <p>Example response:</p> <pre><code>{\n    \"access_token\": \"...\",\n    \"refresh_token\": \"...\",\n    \"token_type\": \"Bearer\",\n    \"expires_at\": \"...\",\n    \"refresh_expires_at\": \"...\",\n    \"audience\": \"tasks-api\"\n}\n</code></pre>"},{"location":"clients/#post-authrefresh","title":"\ud83d\udd04 <code>POST /auth/refresh</code>","text":"<p>Use your <code>refresh_token</code> to renew your tokens.</p> <p>JSON body:</p> <pre><code>{\n    \"refresh_token\": \"...\",\n    \"audience\": \"tasks-api\" // optional\n}\n</code></pre>"},{"location":"clients/#authenticating-requests","title":"\ud83d\udce1 Authenticating Requests","text":"<p>Pass the token in your <code>Authorization</code> header:</p> <pre><code>Authorization: Bearer &lt;access_token&gt;\n</code></pre> <p>This is required for:</p> <ul> <li>All <code>/api/v1/*</code> endpoints</li> <li>WebSocket access (<code>/ws/{task_id}</code>)</li> </ul>"},{"location":"clients/#websocket-authentication-options","title":"\ud83d\udd0c WebSocket Authentication Options","text":"<p>You can authenticate WebSocket connections via:</p> Method Example Use Case Header <code>Authorization: Bearer &lt;token&gt;</code> Best for Python clients Subprotocol <code>task-api,&lt;token&gt;</code> Recommended for JS Cookie <code>access_token=&lt;token&gt;</code> Used in browser-based UIs Query Param <code>/ws/{task_id}?access_token=...</code> Fallback only (less secure) <p>More info: websockets authentication</p>"},{"location":"clients/#managing-clients","title":"\ud83e\uddea Managing Clients","text":"<p>To create or delete clients, use the <code>clients-api</code> token:</p> <ul> <li><code>POST /api/v1/clients</code> \u2014 create new client</li> <li><code>GET /api/v1/clients</code> \u2014 list all clients</li> <li><code>DELETE /api/v1/clients/{client_id}</code> \u2014 remove a client</li> <li><code>DELETE /api/v1/clients</code> \u2014 remove multiple clients</li> <li><code>DELETE /api/v1/clients?ids=id1&amp;ids=2...</code> \u2014 list specific clients</li> <li><code>DELETE /api/v1/clients?audiences=tasks-api</code> \u2014 remove all tasks-api clients</li> </ul> <p>Only tokens issued for the <code>clients-api</code> audience have access to these routes.</p>"},{"location":"clients/#where-its-used","title":"Where It\u2019s Used","text":"<ul> <li>\ud83d\udd10 The example UI (<code>examples/html/</code>) requires a <code>tasks-api</code> client to authenticate.</li> <li>\ud83d\udd27 Swagger UI supports authentication via the lock icon (<code>/docs</code>).</li> <li>\ud83e\uddea All scripts or test clients should load their credentials from <code>clients.json</code>.</li> </ul>"},{"location":"clients/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>Full API reference: OpenAPI Docs</li> <li>Related topics:<ul> <li>Tasks</li> <li>Live Input/Output</li> </ul> </li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#getting-started","title":"Getting Started","text":"<p>Follow these steps to get Waldiez Runner up and running in your development environment.</p>"},{"location":"getting-started/#quickstart-dockerpodman-compose","title":"\ud83d\udc33 Quickstart (Docker/Podman Compose)","text":"<p>To launch the full development stack (API + Redis + Postgres + Nginx):</p> <p>Note</p> <p>This could take some minutes on the first run, as it installs all dependencies.</p> <pre><code>docker compose -f compose.dev.yaml up --build\n</code></pre> <p>This setup includes:</p> <ul> <li>API server (waldiez-runner)</li> <li>Redis + PostgreSQL</li> <li>Taskiq worker + scheduler</li> <li>Nginx reverse proxy</li> <li>A simple static example in <code>examples/html</code></li> </ul> <p>Once started, you can access:</p> <ul> <li>Static example UI: http://localhost</li> <li>API: http://localhost/docs (Swagger UI)</li> </ul> <p> </p> <p>Note</p> <p>Alternatively, you can open this project in VS Code with Dev Containers enabled \u2014 it uses most of the services (not nginx) via .devcontainer/compose.yaml.</p>"},{"location":"getting-started/#authenticating-with-the-api-or-example-ui","title":"\ud83d\udd11 Authenticating with the API or Example UI","text":"<p>When the server starts, it automatically generates a <code>clients.json</code> file in the project root. This file contains two API clients:</p> <ul> <li>One for the <code>clients-api</code> audience (managing clients)</li> <li>One for the <code>tasks-api</code> audience (creating and interacting with tasks)</li> </ul> <p>You'll need the <code>tasks-api</code> credentials to:</p> <ul> <li>Use the Swagger UI (try out endpoints under <code>/api/v1/tasks</code>)</li> <li>Submit tasks via curl or HTTP clients</li> <li>Use the example UI at http://localhost</li> </ul> <p>Info</p> <p>On the example page, you\u2019ll be asked to paste the base URL, client ID, and secret. Use the values from <code>clients.json</code> (specifically the <code>tasks-api</code> entry).</p> <p>\ud83d\udd10 See Clients &amp; Authentication for more details.</p>"},{"location":"getting-started/#local-mode-advanced","title":"\ud83e\uddea Local Mode (Advanced)","text":"<p>You can also run the server without any external dependencies (Redis/Postgres):</p> <ul> <li>SQLite for storage</li> <li>FakeRedis for message streams</li> </ul> <pre><code>make dev-no-reload\n</code></pre> <p>Warning</p> <p>Do expect limitations in this mode, [Fake]Redis messages might not work as expected.</p> <p>Or manually (what <code>make dev-no-reload</code> does):</p> <pre><code># drop all tables and remove the .env file if it exists\npython scripts/drop.py\n# switch to local mode if not already\npython scripts/toggle.py --mode local\n# make sure the .env file is created and the database is initialized\npython scripts/pre_start.py --dev\n# make sure the first two Clients are created\npython scripts/initial_data.py --dev\n# start the server, the broker and the scheduler\npython -m waldiez_runner --trusted-origins http://localhost:3000,http://localhost:8000 --trusted-hosts localhost --debug --no-force-ssl --no-redis --no-postgres --dev --all\n</code></pre> <p>You can now either use the Swagger UI at http://localhost:8000/docs or you can also serve the example on another port terminal:</p> <pre><code>cd examples/plain\npython -m http.server 3000\n</code></pre> <p>Calling <code>python -m http.server</code> will start a simple HTTP server on port 3000, serving the files in the current directory. You can now access the example UI at http://localhost:3000.</p>"},{"location":"getting-started/#submitting-and-managing-tasks","title":"\ud83d\udce4 Submitting and Managing Tasks","text":"<p>Once the server is running, you can create and interact with tasks:</p> <ul> <li>Submit a task by uploading a <code>.waldiez</code> file via:<ul> <li>the example UI at http://localhost</li> <li>or the Swagger UI at http://localhost/docs (<code>POST /api/v1/tasks</code>)</li> </ul> </li> </ul> <ul> <li>Monitor task progress via:<ul> <li>the Swagger <code>GET /api/v1/tasks/{task_id}</code></li> <li>or the WebSocket endpoint <code>/ws/{task_id}</code> (see WebSocket)</li> </ul> </li> </ul> <ul> <li>Send input if the task requests it:<ul> <li>Use the input box in the example UI</li> <li>Or call <code>POST /api/v1/tasks/{task_id}/input</code></li> </ul> </li> </ul> <ul> <li>Cancel or delete tasks using:<ul> <li><code>POST /api/v1/tasks/{task_id}/cancel</code></li> <li><code>DELETE /api/v1/tasks/{task_id}</code></li> </ul> </li> </ul> <p>You can explore all available routes via the interactive API docs at <code>/docs</code>.</p>"},{"location":"tasks/","title":"Tasks","text":"<p>Waldiez Runner provides a set of HTTP endpoints to manage, run, and interact with tasks. All routes are under the <code>/api/v1/tasks</code> path and require a valid JWT token with a <code>tasks-api</code> audience.</p>"},{"location":"tasks/#list-all-tasks","title":"\ud83d\udcc4 List All Tasks","text":"<p>GET /api/v1/tasks</p> <p>Returns a paginated list of all tasks for the current client.</p> <p>Query Parameters (optional, for pagination)</p> <ul> <li><code>page</code> (default: 1)</li> <li><code>size</code> (default: 50)</li> </ul> <p>Response: <code>Page[TaskResponse]</code></p>"},{"location":"tasks/#create-a-new-task","title":"\ud83d\udce5 Create a New Task","text":"<p>POST /api/v1/tasks</p> <p>Uploads a <code>.waldiez</code> flow and creates a new task. Limited to 3 concurrent tasks per client.</p> <p>Form Data:</p> <ul> <li><code>file</code>: The <code>.waldiez</code> file (required)</li> <li><code>input_timeout</code>: Timeout for input requests (default: 180 seconds)</li> </ul> <p>Response: <code>TaskResponse</code></p> <p>Error: <code>429</code> if the task limit is exceeded.</p>"},{"location":"tasks/#get-task-by-id","title":"\ud83d\udcc4 Get Task by ID","text":"<p>GET /api/v1/tasks/{task_id}</p> <p>Returns metadata about the specified task.</p> <p>Response: <code>TaskResponse</code></p>"},{"location":"tasks/#send-input-to-task","title":"\ud83c\udfa4 Send Input to Task","text":"<p>POST /api/v1/tasks/{task_id}/input</p> <p>Send a response to an active input_request.</p> <p>Request Body:</p> <pre><code>{\n  \"request_id\": \"uuid-string\",\n  \"data\": \"your input message\"\n}\n</code></pre> <p>Response: 204 No Content</p> <p>Error Conditions:</p> <ul> <li>Invalid task ID or client</li> <li>Task is not waiting for input</li> <li>request_id does not match the active prompt</li> </ul>"},{"location":"tasks/#download-task-results","title":"\u2b07\ufe0f Download Task Results","text":"<p>GET /api/v1/tasks/{task_id}/download</p> <p>Downloads a .zip archive with task outputs.</p> <p>Response: <code>FileResponse</code></p>"},{"location":"tasks/#cancel-task","title":"\ud83d\udeab Cancel Task","text":"<p>POST /api/v1/tasks/{task_id}/cancel</p> <p>Cancels a running or waiting task.</p> <p>Response: Updated <code>TaskResponse</code></p> <p>Error: <code>400</code> if task is already finished or cannot be cancelled</p>"},{"location":"tasks/#delete-a-task","title":"\ud83e\uddf9 Delete a task","text":"<p>DELETE /api/v1/tasks/{task_id}</p> <p>Soft-deletes the task (schedules removal of files and DB records). Active tasks require <code>?force=true</code> to be deleted.</p> <p>Query Parameters:</p> <ul> <li><code>force</code>: set true to delete even active tasks</li> </ul> <p>Response: <code>204</code> No Content</p>"},{"location":"tasks/#delete-multiple-tasks","title":"\ud83e\udde8 Delete Multiple Tasks","text":"<p>DELETE /api/v1/tasks</p> <p>Soft-deletes all tasks for the current client. By default, only completed/cancelled tasks are deleted. Use force=true to delete active ones.</p> <p>Query Parameters:</p> <ul> <li><code>ids</code>: Ids of tasks to delete (optional, repeated)</li> <li><code>force</code>: true to also delete active tasks</li> </ul> <p>Response: <code>204</code> No Content</p> <p>Warning</p> <ul> <li>Clients can only have up to a limited (defaulting to 3) concurrent active tasks (pending, running, waiting_for_input).</li> <li>Input timeout can be configured per task.</li> <li>Input messages must match the expected request_id.</li> <li>Deleted tasks are soft-deleted and hidden from future listings.</li> </ul>"},{"location":"tasks/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>Full API reference: OpenAPI Docs</li> <li>Related topics:<ul> <li>Authentication</li> <li>Live Input/Output</li> </ul> </li> </ul>"},{"location":"websocket/","title":"WebSocket","text":""},{"location":"websocket/#websocket-api","title":"WebSocket API","text":"<p>Waldiez Runner supports live task interaction via WebSocket \u2014 enabling real-time logs, prompts, and input responses.</p>"},{"location":"websocket/#endpoint","title":"\ud83d\udee3\ufe0f Endpoint","text":"<p><code>/ws/{task_id}</code></p> <ul> <li>Requires a valid JWT token with the <code>tasks-api</code> audience</li> <li>Only works while the task is running or waiting for input</li> </ul>"},{"location":"websocket/#authentication-options","title":"\ud83d\udd10 Authentication Options","text":"<p>You can authenticate your WebSocket connection in any of the following ways:</p> Method Example Recommended for Header <code>Authorization: Bearer &lt;token&gt;</code> Python clients Subprotocol <code>task-api,&lt;token&gt;</code> JavaScript clients Cookie <code>access_token=&lt;token&gt;</code> Browser UIs Query Param <code>/ws/{task_id}?access_token=...</code> Fallback only <p>\ud83d\udd10 For info on getting tokens: see Clients &amp; Authentication</p>"},{"location":"websocket/#message-format","title":"\ud83d\udd01 Message Format","text":"<p>All messages are JSON objects with the following schema:</p> <pre><code>{\n  \"type\": \"print | input_request | input_response | termination\",\n  \"task_id\": \"abc123\",\n  \"timestamp\": 1711210101210,\n  \"data\": \"Message string or structured content\",\n  \"request_id\": \"uuid (optional)\",\n  \"password\": \"string (optional, only in input_request)\"\n}\n</code></pre>"},{"location":"websocket/#receiving-messages","title":"\ud83d\udce4 Receiving Messages","text":"<p>You may receive:</p> <ul> <li><code>type: \"print\"</code> \u2192 A log or output line from the task</li> <li><code>type: \"input_request\"</code> \u2192 A prompt requesting user input</li> <li><code>type: \"termination\"</code> \u2192 Signals end of task or current turn</li> </ul>"},{"location":"websocket/#sending-input","title":"\ud83c\udfa4 Sending Input","text":"<p>To respond to a prompt:</p> <pre><code>{\n  \"type\": \"input_response\",\n  \"task_id\": \"abc123\",\n  \"request_id\": \"same-as-request\",\n  \"timestamp\": 1711210111111,\n  \"data\": \"Your input\"\n}\n</code></pre> <p>\ud83e\udde0 <code>request_id</code> must match the one from the latest <code>input_request</code>!</p>"},{"location":"websocket/#use-cases","title":"\u2699\ufe0f Use Cases","text":"<ul> <li>Stream task logs to a UI</li> <li>Handle human-in-the-loop flows</li> <li>Use WebSocket for fast feedback vs polling</li> <li>Match input/output easily using <code>request_id</code></li> </ul>"},{"location":"websocket/#example-ui","title":"\ud83e\uddea Example UI","text":"<p>Try it at http://localhost using the <code>tasks-api</code> credentials from <code>clients.json</code>.</p> <p>See the source in <code>examples/plain/static/js/lib/ws.js</code>.</p>"},{"location":"websocket/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>Tasks</li> <li>Clients &amp; Authentication</li> <li>Getting Started</li> </ul>"},{"location":"examples/","title":"Overview","text":""},{"location":"examples/#examples","title":"Examples","text":"<p>This section showcases how to interact with Waldiez Runner using different interfaces and technologies. These examples are designed to help you:</p> <ul> <li>Authenticate with the API</li> <li>Upload and manage <code>.waldiez</code> tasks</li> <li>Stream task output in real-time</li> <li>Send user input dynamically (if required by the task)</li> </ul> <p>Each example demonstrates the use of the <code>waldiez_runner.client</code> module, which provides a high-level, consistent interface to the backend.</p>"},{"location":"examples/#html-javascript-vanilla","title":"\ud83c\udf10 HTML + JavaScript (Vanilla)","text":"<p>A frontend-only example using plain HTML, CSS, and JavaScript (no frameworks). Demonstrates:</p> <ul> <li>Authentication</li> <li>File upload via Fetch API</li> <li>WebSocket streaming</li> <li>Dynamic input prompts</li> </ul> <p>Ideal for minimal, portable frontend integration.</p> <p>\ud83d\udd17 HTML + JS Example</p>"},{"location":"examples/#jupyter-notebook-task-demo","title":"\ud83e\uddea Jupyter Notebook: Task Demo","text":"<p>This notebook demonstrates how to:</p> <ol> <li>Configure and authenticate using the <code>TasksClient</code>.</li> <li>Load and submit a <code>.waldiez</code> file programmatically.</li> <li>Monitor task status via the REST API.</li> <li>Read results once the task completes.</li> <li>Optionally, visualize or debug flows interactively.</li> </ol> <p>Perfect for exploration and development workflows.</p> <p>\ud83d\udcc4 task_demo.ipynb</p>"},{"location":"examples/#streamlit-demo","title":"\ud83d\udcca Streamlit Demo","text":"<p>A Streamlit-based interactive UI for triggering tasks and viewing real-time output.</p> <ul> <li>Client-side theme toggle (dark/light)</li> <li>Upload <code>.waldiez</code> file</li> <li>Chat-like message stream (WebSocket)</li> <li>Live user input handling</li> </ul> <p>\ud83d\udcc4 Streamlit Demo \ud83d\udca1 app.py</p>"},{"location":"examples/app/","title":"App","text":"In\u00a0[\u00a0]: Copied! <pre>\"\"\"A Streamlit app demo for Waldiez Runner.\"\"\"\n</pre> \"\"\"A Streamlit app demo for Waldiez Runner.\"\"\" In\u00a0[\u00a0]: Copied! <pre>import json\nimport os\nimport sys\nimport threading\nfrom pathlib import Path\nfrom queue import Queue\n</pre> import json import os import sys import threading from pathlib import Path from queue import Queue In\u00a0[\u00a0]: Copied! <pre>import streamlit as st\nfrom streamlit.runtime.scriptrunner import add_script_run_ctx\nfrom streamlit_autorefresh import st_autorefresh  # type: ignore\n</pre> import streamlit as st from streamlit.runtime.scriptrunner import add_script_run_ctx from streamlit_autorefresh import st_autorefresh  # type: ignore In\u00a0[\u00a0]: Copied! <pre># Allow running from /examples/streamlit\ntry:\n    from waldiez_runner.client import (\n        TaskCreateRequest,\n        TaskResponse,\n        TasksClient,\n        UserInputRequest,\n    )\nexcept ImportError:\n    sys.path.append(str(Path(__file__).resolve().parent.parent.parent))\n    from waldiez_runner.client import (\n        TaskCreateRequest,\n        TaskResponse,\n        TasksClient,\n        UserInputRequest,\n    )\n</pre> # Allow running from /examples/streamlit try:     from waldiez_runner.client import (         TaskCreateRequest,         TaskResponse,         TasksClient,         UserInputRequest,     ) except ImportError:     sys.path.append(str(Path(__file__).resolve().parent.parent.parent))     from waldiez_runner.client import (         TaskCreateRequest,         TaskResponse,         TasksClient,         UserInputRequest,     ) In\u00a0[\u00a0]: Copied! <pre>st.set_page_config(\n    \"Waldiez Runner Streamlit Demo\", page_icon=\"\ud83e\udd16\", layout=\"wide\"\n)\n</pre> st.set_page_config(     \"Waldiez Runner Streamlit Demo\", page_icon=\"\ud83e\udd16\", layout=\"wide\" ) In\u00a0[\u00a0]: Copied! <pre># -- Streamlit state init\nif \"client\" not in st.session_state:\n    st.session_state.client = None\nif \"task\" not in st.session_state:\n    st.session_state.task: TaskResponse | None = None  # type: ignore\nif \"messages\" not in st.session_state:\n    st.session_state.messages = []\nif \"messages_queue\" not in st.session_state:\n    st.session_state.messages_queue = Queue()\nif \"listening\" not in st.session_state:\n    st.session_state.listening = False\nif \"ws_thread\" not in st.session_state:\n    st.session_state.ws_thread = None\nif \"ws_stop_event\" not in st.session_state:\n    st.session_state.ws_stop_event = threading.Event()\n</pre> # -- Streamlit state init if \"client\" not in st.session_state:     st.session_state.client = None if \"task\" not in st.session_state:     st.session_state.task: TaskResponse | None = None  # type: ignore if \"messages\" not in st.session_state:     st.session_state.messages = [] if \"messages_queue\" not in st.session_state:     st.session_state.messages_queue = Queue() if \"listening\" not in st.session_state:     st.session_state.listening = False if \"ws_thread\" not in st.session_state:     st.session_state.ws_thread = None if \"ws_stop_event\" not in st.session_state:     st.session_state.ws_stop_event = threading.Event() In\u00a0[\u00a0]: Copied! <pre># a bit of styling\n# Theme toggle button in top-right corner\nst.html(\n    \"\"\"\n    &lt;style&gt;\n    .stAppHeader {\n        display: none;\n    }\n    .st-key-theme_toggle_btn {\n        position: fixed;\n        top: 2rem;\n        right: 2rem;\n        z-index: 10000;\n    }\n    &lt;/style&gt;\n    \"\"\"\n)\n</pre> # a bit of styling # Theme toggle button in top-right corner st.html(     \"\"\"          \"\"\" ) In\u00a0[\u00a0]: Copied! <pre>if \"current_theme\" not in st.session_state:\n    st.session_state[\"current_theme\"] = \"light\"\n</pre> if \"current_theme\" not in st.session_state:     st.session_state[\"current_theme\"] = \"light\" In\u00a0[\u00a0]: Copied! <pre>if st.button(\n    \"\ud83c\udf1c\" if st.session_state[\"current_theme\"] == \"light\" else \"\ud83c\udf1e\",\n    key=\"theme_toggle_btn\",\n):\n    selected = st.session_state[\"current_theme\"]\n    # pylint: disable=protected-access\n    if selected == \"light\":\n        st._config.set_option(\"theme.base\", \"dark\")\n        st.session_state[\"current_theme\"] = \"dark\"\n    elif selected == \"dark\":\n        st._config.set_option(\"theme.base\", \"light\")\n        st.session_state[\"current_theme\"] = \"light\"\n    st.rerun()\n</pre> if st.button(     \"\ud83c\udf1c\" if st.session_state[\"current_theme\"] == \"light\" else \"\ud83c\udf1e\",     key=\"theme_toggle_btn\", ):     selected = st.session_state[\"current_theme\"]     # pylint: disable=protected-access     if selected == \"light\":         st._config.set_option(\"theme.base\", \"dark\")         st.session_state[\"current_theme\"] = \"dark\"     elif selected == \"dark\":         st._config.set_option(\"theme.base\", \"light\")         st.session_state[\"current_theme\"] = \"light\"     st.rerun() In\u00a0[\u00a0]: Copied! <pre># -- WebSocket thread logic\ndef websocket_listener_thread(\n    tasks_client: TasksClient,\n    task_id: str,\n    queue: Queue[str],\n) -&gt; None:\n    \"\"\"WebSocket listener thread target.\n\n    Parameters\n    ----------\n    tasks_client : TasksClient\n        The TasksClient instance to use for WebSocket communication.\n    task_id : str\n        The ID of the task to listen to.\n    queue : Queue[str]\n        The queue to store incoming messages.\n    \"\"\"\n\n    def on_msg(new_msg: str) -&gt; None:\n        \"\"\"Callback for new WebSocket messages.\n\n        Parameters\n        ----------\n        new_msg : str\n            The new message received from the WebSocket.\n        \"\"\"\n        print(\"WS on message:\", new_msg)\n        queue.put(new_msg)\n\n    def on_err(err: str) -&gt; None:\n        \"\"\"Callback for WebSocket errors.\n\n        Parameters\n        ----------\n        err : str\n            The error message received from the WebSocket.\n        \"\"\"\n        print(\"WS on error:\", err)\n        queue.put(json.dumps({\"type\": \"error\", \"data\": err}))\n\n    # pylint: disable=broad-exception-caught\n    try:\n        tasks_client.start_ws_listener(\n            task_id=task_id,\n            on_message=on_msg,\n            on_error=on_err,\n            in_thread=False,\n        )\n    except Exception as e:\n        print(\"WebSocket error:\", e)\n</pre> # -- WebSocket thread logic def websocket_listener_thread(     tasks_client: TasksClient,     task_id: str,     queue: Queue[str], ) -&gt; None:     \"\"\"WebSocket listener thread target.      Parameters     ----------     tasks_client : TasksClient         The TasksClient instance to use for WebSocket communication.     task_id : str         The ID of the task to listen to.     queue : Queue[str]         The queue to store incoming messages.     \"\"\"      def on_msg(new_msg: str) -&gt; None:         \"\"\"Callback for new WebSocket messages.          Parameters         ----------         new_msg : str             The new message received from the WebSocket.         \"\"\"         print(\"WS on message:\", new_msg)         queue.put(new_msg)      def on_err(err: str) -&gt; None:         \"\"\"Callback for WebSocket errors.          Parameters         ----------         err : str             The error message received from the WebSocket.         \"\"\"         print(\"WS on error:\", err)         queue.put(json.dumps({\"type\": \"error\", \"data\": err}))      # pylint: disable=broad-exception-caught     try:         tasks_client.start_ws_listener(             task_id=task_id,             on_message=on_msg,             on_error=on_err,             in_thread=False,         )     except Exception as e:         print(\"WebSocket error:\", e) In\u00a0[\u00a0]: Copied! <pre>def start_ws_thread(\n    tasks_client: TasksClient,\n    task_id: str,\n    queue: Queue[str],\n) -&gt; threading.Thread:\n    \"\"\"Start a background thread for WebSocket listening.\n\n    Parameters\n    ----------\n    tasks_client : TasksClient\n        The TasksClient instance to use for WebSocket communication.\n    task_id : str\n        The ID of the task to listen to.\n    queue : Queue[str]\n        The queue to store incoming messages.\n\n    Returns\n    -------\n    threading.Thread\n        The thread that runs the WebSocket listener.\n    \"\"\"\n    thread = threading.Thread(\n        target=websocket_listener_thread,\n        args=(tasks_client, task_id, queue),\n        daemon=True,\n    )\n    add_script_run_ctx(thread)\n    thread.start()\n    return thread\n</pre> def start_ws_thread(     tasks_client: TasksClient,     task_id: str,     queue: Queue[str], ) -&gt; threading.Thread:     \"\"\"Start a background thread for WebSocket listening.      Parameters     ----------     tasks_client : TasksClient         The TasksClient instance to use for WebSocket communication.     task_id : str         The ID of the task to listen to.     queue : Queue[str]         The queue to store incoming messages.      Returns     -------     threading.Thread         The thread that runs the WebSocket listener.     \"\"\"     thread = threading.Thread(         target=websocket_listener_thread,         args=(tasks_client, task_id, queue),         daemon=True,     )     add_script_run_ctx(thread)     thread.start()     return thread In\u00a0[\u00a0]: Copied! <pre>def process_messages() -&gt; None:\n    \"\"\"Pull messages from queue and store in session state.\"\"\"\n    queue = st.session_state.messages_queue\n    while not queue.empty():\n        raw = queue.get()\n        # pylint: disable=broad-exception-caught\n        try:\n            parsed = json.loads(raw)\n            st.session_state.messages.append(parsed)\n        except Exception as e:\n            st.session_state.messages.append({\"type\": \"error\", \"data\": str(e)})\n</pre> def process_messages() -&gt; None:     \"\"\"Pull messages from queue and store in session state.\"\"\"     queue = st.session_state.messages_queue     while not queue.empty():         raw = queue.get()         # pylint: disable=broad-exception-caught         try:             parsed = json.loads(raw)             st.session_state.messages.append(parsed)         except Exception as e:             st.session_state.messages.append({\"type\": \"error\", \"data\": str(e)}) In\u00a0[\u00a0]: Copied! <pre># --- Autorefresh every 2s\nst_autorefresh(interval=2000, key=\"autorefresh\", limit=None)\nprocess_messages()\n</pre> # --- Autorefresh every 2s st_autorefresh(interval=2000, key=\"autorefresh\", limit=None) process_messages() In\u00a0[\u00a0]: Copied! <pre># --- UI ---\nst.title(\"Waldiez Runner - Streamlit Demo\")\nst.markdown(\n    \"This demo shows how to authenticate, \"\n    \"upload a `.waldiez` file, and stream its output in real-time.\"\n)\n</pre> # --- UI --- st.title(\"Waldiez Runner - Streamlit Demo\") st.markdown(     \"This demo shows how to authenticate, \"     \"upload a `.waldiez` file, and stream its output in real-time.\" ) In\u00a0[\u00a0]: Copied! <pre># --- Step 1: Authentication ---\nwith st.expander(\"1. Authentication (Tasks management API)\", expanded=True):\n    base_url = st.text_input(\n        \"Base URL\", value=os.getenv(\"BASE_URL\", \"http://localhost:8000\")\n    )\n    client_id = st.text_input(\"Client ID\", type=\"password\")\n    client_secret = st.text_input(\"Client Secret\", type=\"password\")\n    if st.button(\"Authenticate\"):\n        client = TasksClient()\n        client.configure(\n            base_url,\n            client_id,\n            client_secret,\n        )\n        if not client.authenticate():\n            st.error(\"Could not authenticate\")\n            st.session_state.client = None\n        else:\n            st.session_state.client = client\n            st.success(\"Authenticated successfully.\")\n</pre> # --- Step 1: Authentication --- with st.expander(\"1. Authentication (Tasks management API)\", expanded=True):     base_url = st.text_input(         \"Base URL\", value=os.getenv(\"BASE_URL\", \"http://localhost:8000\")     )     client_id = st.text_input(\"Client ID\", type=\"password\")     client_secret = st.text_input(\"Client Secret\", type=\"password\")     if st.button(\"Authenticate\"):         client = TasksClient()         client.configure(             base_url,             client_id,             client_secret,         )         if not client.authenticate():             st.error(\"Could not authenticate\")             st.session_state.client = None         else:             st.session_state.client = client             st.success(\"Authenticated successfully.\") In\u00a0[\u00a0]: Copied! <pre># --- Step 2: Submit Task ---\nif st.session_state.client:\n    with st.expander(\"2. Submit a Task\", expanded=True):\n        uploaded = st.file_uploader(\n            \"Upload a .waldiez file\", type=[\"json\", \"waldiez\"]\n        )\n        input_timeout = st.number_input(\n            \"Input timeout (seconds)\", min_value=5, value=180\n        )\n        if st.button(\"Submit Task\") and uploaded:\n            # pylint: disable=broad-exception-caught,too-many-try-statements\n            try:\n                file_data = uploaded.read()\n                task_req = TaskCreateRequest(\n                    file_data=file_data,\n                    file_name=uploaded.name,\n                    input_timeout=input_timeout,\n                )\n                task = st.session_state.client.create_task(task_req)\n                st.session_state.task = task\n                st.session_state.messages.clear()\n                st.session_state.messages_queue.queue.clear()\n                st.success(f\"Task submitted: {task.id}\")\n            except Exception as e:\n                st.error(f\"Task submission failed: {e}\")\n</pre> # --- Step 2: Submit Task --- if st.session_state.client:     with st.expander(\"2. Submit a Task\", expanded=True):         uploaded = st.file_uploader(             \"Upload a .waldiez file\", type=[\"json\", \"waldiez\"]         )         input_timeout = st.number_input(             \"Input timeout (seconds)\", min_value=5, value=180         )         if st.button(\"Submit Task\") and uploaded:             # pylint: disable=broad-exception-caught,too-many-try-statements             try:                 file_data = uploaded.read()                 task_req = TaskCreateRequest(                     file_data=file_data,                     file_name=uploaded.name,                     input_timeout=input_timeout,                 )                 task = st.session_state.client.create_task(task_req)                 st.session_state.task = task                 st.session_state.messages.clear()                 st.session_state.messages_queue.queue.clear()                 st.success(f\"Task submitted: {task.id}\")             except Exception as e:                 st.error(f\"Task submission failed: {e}\") In\u00a0[\u00a0]: Copied! <pre># --- Step 3: Live Output ---\ndef display_messages() -&gt; None:\n    \"\"\"Display messages in the chat interface.\"\"\"\n    for msg in st.session_state.messages:\n        kind = msg.get(\"type\")\n        content = msg.get(\"data\")\n\n        if kind == \"input_request\":\n            request_id = msg.get(\"request_id\")\n            with st.form(key=f\"form_{request_id}\"):\n                user_input = st.text_input(\"Input requested:\")\n                submitted = st.form_submit_button(\"Send\")\n                if submitted:\n                    # pylint: disable=broad-exception-caught\n                    try:\n                        user_input_req = UserInputRequest(\n                            task_id=st.session_state.task.id,\n                            request_id=request_id,\n                            data=user_input,\n                        )\n                        st.session_state.client.send_user_input(user_input_req)\n                        st.success(\"Input sent.\")\n                    except Exception as e:\n                        st.error(f\"Failed to send input: {e}\")\n        else:\n            role = \"assistant\"\n            if kind == \"input_response\":\n                role = \"user\"\n            elif kind == \"error\":\n                role = \"system\"\n\n            with st.chat_message(role):\n                st.markdown(\n                    content\n                    if isinstance(content, str)\n                    else json.dumps(content, indent=2)\n                )\n</pre> # --- Step 3: Live Output --- def display_messages() -&gt; None:     \"\"\"Display messages in the chat interface.\"\"\"     for msg in st.session_state.messages:         kind = msg.get(\"type\")         content = msg.get(\"data\")          if kind == \"input_request\":             request_id = msg.get(\"request_id\")             with st.form(key=f\"form_{request_id}\"):                 user_input = st.text_input(\"Input requested:\")                 submitted = st.form_submit_button(\"Send\")                 if submitted:                     # pylint: disable=broad-exception-caught                     try:                         user_input_req = UserInputRequest(                             task_id=st.session_state.task.id,                             request_id=request_id,                             data=user_input,                         )                         st.session_state.client.send_user_input(user_input_req)                         st.success(\"Input sent.\")                     except Exception as e:                         st.error(f\"Failed to send input: {e}\")         else:             role = \"assistant\"             if kind == \"input_response\":                 role = \"user\"             elif kind == \"error\":                 role = \"system\"              with st.chat_message(role):                 st.markdown(                     content                     if isinstance(content, str)                     else json.dumps(content, indent=2)                 ) In\u00a0[\u00a0]: Copied! <pre># pylint: disable=too-complex\nif st.session_state.task:  # noqa: C901\n    with st.expander(\"3. Live Task Output\", expanded=True):\n        if not st.session_state.listening:\n            st.session_state.ws_thread = start_ws_thread(\n                st.session_state.client,\n                st.session_state.task.id,\n                st.session_state.messages_queue,\n            )\n            st.session_state.listening = True\n            st.success(\"Started WebSocket listener.\")\n\n        if st.button(\"Stop Listening\"):\n            if (\n                st.session_state.ws_stop_event\n                and not st.session_state.ws_stop_event.is_set()\n            ):\n                st.session_state.ws_stop_event.set()\n                st.session_state.listening = False\n                st.success(\"Listener stop signal sent.\")\n\n        if not st.session_state.messages:\n            st.info(\"Waiting for messages...\")\n\n        display_messages()\n</pre> # pylint: disable=too-complex if st.session_state.task:  # noqa: C901     with st.expander(\"3. Live Task Output\", expanded=True):         if not st.session_state.listening:             st.session_state.ws_thread = start_ws_thread(                 st.session_state.client,                 st.session_state.task.id,                 st.session_state.messages_queue,             )             st.session_state.listening = True             st.success(\"Started WebSocket listener.\")          if st.button(\"Stop Listening\"):             if (                 st.session_state.ws_stop_event                 and not st.session_state.ws_stop_event.is_set()             ):                 st.session_state.ws_stop_event.set()                 st.session_state.listening = False                 st.success(\"Listener stop signal sent.\")          if not st.session_state.messages:             st.info(\"Waiting for messages...\")          display_messages()"},{"location":"examples/html/","title":"HTML + JS (Vanilla)","text":"<p>This example demonstrates how to build a frontend-only integration with the Waldiez Runner backend using plain HTML, CSS, and JavaScript \u2014 no frameworks, no build step, just files you can serve statically.</p>"},{"location":"examples/html/#features","title":"\u2705 Features","text":"<ul> <li>\ud83d\udd10 Auth via client ID / secret</li> <li>\ud83d\udce4 Upload .waldiez files to trigger tasks</li> <li>\ud83d\udce1 Real-time WebSocket streaming</li> <li>\ud83d\udcac Live chat interface with user input support</li> <li>\u267b\ufe0f Reconnect and deduplication logic</li> </ul>"},{"location":"examples/html/#folder-structure","title":"\ud83d\udcc1 Folder Structure","text":"<pre><code>html/\n\u251c\u2500\u2500 index.html                 # Main UI entry point\n\u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 index.css         # Basic styling\n\u2502   |   |__ ...\n\u2502   \u251c\u2500\u2500 js/\n\u2502   \u2502   \u251c\u2500\u2500 main.js                # Main JS file\n\u2502   \u2502   \u251c\u2500\u2500 lib/                   # Client-side libraries\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.js           # Library entry point\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 auth.js             # Authentication logic\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 client.js           # Client API wrapper\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 rest.js             # REST API calls\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 utils.js            # Utility functions\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 ws.js               # WebSocket handling\n\u2502   \u2502   \u251c\u2500\u2500 tasks/                 # Task-related logic\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.js            # Task entry point\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 newTask.js          # New task creation\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 tasksList.js        # Task list management\n\u2502   \u2502   \u251c\u2500\u2500 chat/                  # Chat-related logic\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 index.js            # Chat entry point\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 live.js             # Live chat handling\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 static.js           # Static chat messages (finished tasks)\n\u2502   \u2502   \u2502   \u2514\u2500\u2500 utils.js            # Chat utility functions\n\u2502   \u2502   \u251c\u2500\u2500 snackbar.js             # Snackbar notifications\n\u2502   \u2502   \u251c\u2500\u2500 theme.js                # Theme management (dark/light)\n\u2502   \u251c\u2500\u2500 img/                   # Logo, icons, favicon, etc.\n\u2502   \u2502\u2500\u2500 icons/                 # Icons included in app manifest\n\u2502   \u2514\u2500\u2500 screenshots/           # Screenshots included in app manifest\n\u2514\u2500\u2500 favicon.ico            # App icon\n\u251c\u2500\u2500 site.webmanifest       # Web app manifest\n</code></pre>"},{"location":"examples/html/#how-to-run","title":"\ud83d\ude80 How to Run","text":"<p>Serve the folder statically (no backend code needed here):</p> <pre><code>cd examples/html\npython3 -m http.server 8001\n# Open: http://localhost:8001\n</code></pre> <p>Need a backend?</p> <p>You can run it locally via:</p> <pre><code>docker compose -f compose.dev.yaml up --build\n</code></pre> <p>Then the backend will be available at: <code>http://localhost:8000</code></p>"},{"location":"examples/html/#authentication","title":"\ud83d\udd10 Authentication","text":"<p>To use the UI:</p> <ul> <li>Enter your client_id and client_secret</li> <li>If running locally with the default <code>clients.json</code>, use the tasks-api credentials</li> </ul> <p>Authentication is handled by the auth.js module.</p>"},{"location":"examples/html/#websocket-streaming","title":"\ud83d\udce1 WebSocket Streaming","text":"<p>Once a task is running, the WebSocket connection begins streaming messages:</p> <p>client.ws.listen(taskId, onMessage, onError);</p> <p>Messages are received and rendered in the chat interface. Supported types:</p> <ul> <li>print</li> <li>input_request</li> <li>input_response</li> <li>tool_call</li> <li>termination</li> </ul> <p>Handled through chatLive.js and client.js.</p> <p> </p>"},{"location":"examples/html/#user-input","title":"\u270d\ufe0f User Input","text":"<p>When a task requires user input:</p> <ul> <li>The UI prompts the user dynamically</li> <li>Responses are sent via:</li> </ul> <pre><code>client.sendInput({\n  task_id,\n  request_id,\n  data: userInput,\n});\n</code></pre>"},{"location":"examples/html/#todo-improvements","title":"\u26a0\ufe0f TODO / Improvements","text":"<ul> <li>Persist login across page reloads</li> <li>Improve error handling and fallback UI</li> </ul>"},{"location":"examples/html/#summary","title":"\ud83e\uddea Summary","text":"<p>This minimal yet functional example demonstrates how to:</p> <ul> <li>Interact with Waldiez Runner via REST + WebSocket</li> <li>Handle dynamic input/output</li> <li>Build a no-dependency frontend for .waldiez tasks</li> </ul> <p>Use it as:</p> <ul> <li>A reference for building your own UIs</li> <li>A fallback or lightweight frontend</li> <li>A base for debugging or experimenting with workflows</li> </ul>"},{"location":"examples/streamlit/","title":"Streamlit Demo","text":"<p>This page demonstrates how to build an interactive web application using Streamlit and the <code>waldiez_runner.client</code> to interact with the Waldiez Runner backend.</p>"},{"location":"examples/streamlit/#overview","title":"Overview","text":"<p>The Streamlit demo guides you through:</p> <ol> <li>Authenticating with the API.</li> <li>Uploading a <code>.waldiez</code> file to trigger a task.</li> <li>Viewing real-time output using a WebSocket connection.</li> <li>Sending user input interactively when requested.</li> <li>Displaying task status and results.</li> </ol> <p> </p>"},{"location":"examples/streamlit/#how-to-run","title":"How to Run","text":"<p>To run the example:</p> <pre><code>cd examples/streamlit\n# install dependencies (streamlit and streamlit-autorefresh)\n# use a venv if not already in one\n# python3 -m venv venv\n# `source venv/bin/activate` or `venv\\Scripts\\activate`\npython3 -m pip install -r requirements.txt\nstreamlit run app.py\n</code></pre> <p>Note</p> <p>Make sure the backend is running and accessible at the specified <code>BASE_URL</code>. If running locally: <pre><code>docker compose -f compose.dev.yaml up --build\n</code></pre> The <code>BASE_URL</code> would then be: <code>http://localhost:8000</code>. </p> <p>Info</p> <p>If running locally, the root of the project should include a <code>clients.json</code> file with two predefined clients: - <code>clients-api</code>: For managing clients. - <code>tasks-api</code>: For submitting and managing tasks. You can use the <code>tasks-api</code> credentials to authenticate and interact with the tasks API.</p> <p> </p>"},{"location":"examples/streamlit/#code-highlights","title":"Code Highlights","text":"<p>This section highlights the key parts of the code that interact with the <code>waldiez_runner.client</code> module. The full code is available in the app.py file.</p> <p>Authentication</p> <pre><code>client = TasksClient()\nclient.configure(base_url, client_id, client_secret)\nclient.authenticate()\n</code></pre> <p>Task Submission</p> <pre><code>task_req = TaskCreateRequest(file_data=..., file_name=\"...\", input_timeout=...)\ntask = client.create_task(task_req)\n</code></pre> <p>WebSocket Listener</p> <pre><code>client.start_ws_listener(\n    task_id,\n    on_message=on_msg,\n    on_error=on_err,\n    in_thread=False,\n)\n</code></pre> <p>User Input Handling</p> <pre><code>kind = msg.get(\"type\")\nif kind == \"input_request\":\n    request_id = msg.get(\"request_id\")\n    with st.form(key=f\"form_{request_id}\"):\n        user_input = st.text_input(\"Input requested:\")\n        submitted = st.form_submit_button(\"Send\")\n        if submitted:\n            try:\n                user_input_req = UserInputRequest(\n                    task_id=st.session_state.task.id,\n                    request_id=request_id,\n                    data=user_input,\n                )\n                st.session_state.client.send_user_input(user_input_req)\n                st.success(\"Input sent.\")\n            except Exception as e:\n                st.error(f\"Failed to send input: {e}\")\n</code></pre>"},{"location":"examples/task_demo/","title":"Waldiez Runner: Jupyter Notebook Example","text":"In\u00a0[1]: Copied! <pre>import os\nimport sys\nfrom pathlib import Path\n\ntry:\n    from waldiez_runner.client import (\n        TasksClient,\n        TaskStatus,\n        ClientsAdmin,\n        ClientCreateRequest,\n        ClientCreateResponse,\n        TaskCreateRequest,\n        UserInputRequest,\n    )\nexcept ImportError:\n    # Likely running from examples/jupyter \u2014 add project root to path\n    sys.path.append(str(Path(\".\").resolve().parent.parent))\n    from waldiez_runner.client import (\n        TasksClient,\n        TaskStatus,\n        ClientsAdmin,\n        ClientCreateRequest,\n        ClientCreateResponse,\n        TaskCreateRequest,\n        UserInputRequest,\n    )\n\n# Base URL for the API\nBASE_URL = os.environ.get(\"BASE_URL\", \"http://localhost:8000\")\n\n# Auth credentials from env or prompt\n_CLIENT_ID = os.environ.get(\"CLIENT_ID\") or input(\"CLIENT_ID: \")\n_CLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\") or input(\"CLIENT_SECRET: \")\n_AUDIENCE = os.environ.get(\"AUDIENCE\") or input(\"AUDIENCE: \")\nCLIENT_ID = _CLIENT_ID.strip()\nCLIENT_SECRET = _CLIENT_SECRET.strip()\nAUDIENCE = _AUDIENCE.strip()\nos.environ[\"WALDIEZ_CLIENT_ID\"] = CLIENT_ID\nos.environ[\"WALDIEZ_CLIENT_SECRET\"] = CLIENT_SECRET\nos.environ[\"WALDIEZ_AUDIENCE\"] = AUDIENCE\n</pre> import os import sys from pathlib import Path  try:     from waldiez_runner.client import (         TasksClient,         TaskStatus,         ClientsAdmin,         ClientCreateRequest,         ClientCreateResponse,         TaskCreateRequest,         UserInputRequest,     ) except ImportError:     # Likely running from examples/jupyter \u2014 add project root to path     sys.path.append(str(Path(\".\").resolve().parent.parent))     from waldiez_runner.client import (         TasksClient,         TaskStatus,         ClientsAdmin,         ClientCreateRequest,         ClientCreateResponse,         TaskCreateRequest,         UserInputRequest,     )  # Base URL for the API BASE_URL = os.environ.get(\"BASE_URL\", \"http://localhost:8000\")  # Auth credentials from env or prompt _CLIENT_ID = os.environ.get(\"CLIENT_ID\") or input(\"CLIENT_ID: \") _CLIENT_SECRET = os.environ.get(\"CLIENT_SECRET\") or input(\"CLIENT_SECRET: \") _AUDIENCE = os.environ.get(\"AUDIENCE\") or input(\"AUDIENCE: \") CLIENT_ID = _CLIENT_ID.strip() CLIENT_SECRET = _CLIENT_SECRET.strip() AUDIENCE = _AUDIENCE.strip() os.environ[\"WALDIEZ_CLIENT_ID\"] = CLIENT_ID os.environ[\"WALDIEZ_CLIENT_SECRET\"] = CLIENT_SECRET os.environ[\"WALDIEZ_AUDIENCE\"] = AUDIENCE In\u00a0[2]: Copied! <pre># Make sure we have a client with the right audience (tasks-api)\n# if we create a new one, let's delete it at the end\nCREATED_NEW_CLIENT = False\n\nif AUDIENCE == \"clients-api\":\n    admin = ClientsAdmin(\n        on_error=lambda e: print(f\"Error: {e}\"),\n        on_auth_error=lambda e: print(f\"Auth Error: {e}\"),\n        # on_auth_token=lambda token: print(f\"Auth Token: {token}\"),\n    )\n    admin.configure(BASE_URL, CLIENT_ID, CLIENT_SECRET)\n\n    print(\"Creating a new client with tasks-api audience...\")\n    client_create = ClientCreateRequest(\n        # client_id=CLIENT_ID,  # not these, they are existing (for clients-api)\n        # client_secret=CLIENT_SECRET,  # let's let the server generate them\n        audience=\"tasks-api\",\n        description=\"Client for tasks-api\",  # optional\n    )\n    client_info: ClientCreateResponse = admin.create_client(\n        client_data=client_create\n    )\n    TASKS_CLIENT_ID = client_info.client_id\n    TASKS_CLIENT_SECRET = client_info.client_secret\n    CREATED_NEW_CLIENT = True\n    print(\"Created tasks-api client.\")\nelse:\n    TASKS_CLIENT_ID = CLIENT_ID\n    TASKS_CLIENT_SECRET = CLIENT_SECRET\n</pre> # Make sure we have a client with the right audience (tasks-api) # if we create a new one, let's delete it at the end CREATED_NEW_CLIENT = False  if AUDIENCE == \"clients-api\":     admin = ClientsAdmin(         on_error=lambda e: print(f\"Error: {e}\"),         on_auth_error=lambda e: print(f\"Auth Error: {e}\"),         # on_auth_token=lambda token: print(f\"Auth Token: {token}\"),     )     admin.configure(BASE_URL, CLIENT_ID, CLIENT_SECRET)      print(\"Creating a new client with tasks-api audience...\")     client_create = ClientCreateRequest(         # client_id=CLIENT_ID,  # not these, they are existing (for clients-api)         # client_secret=CLIENT_SECRET,  # let's let the server generate them         audience=\"tasks-api\",         description=\"Client for tasks-api\",  # optional     )     client_info: ClientCreateResponse = admin.create_client(         client_data=client_create     )     TASKS_CLIENT_ID = client_info.client_id     TASKS_CLIENT_SECRET = client_info.client_secret     CREATED_NEW_CLIENT = True     print(\"Created tasks-api client.\") else:     TASKS_CLIENT_ID = CLIENT_ID     TASKS_CLIENT_SECRET = CLIENT_SECRET <pre>Creating a new client with tasks-api audience...\nCreated tasks-api client.\n</pre> In\u00a0[3]: Copied! <pre># Now initialize the TasksClient\nclient = TasksClient()\nclient.configure(\n    base_url=BASE_URL,\n    client_id=TASKS_CLIENT_ID,\n    client_secret=TASKS_CLIENT_SECRET,\n    on_auth_token=None,  # we could use a custom handler here\n    on_auth_error=None,  # and here\n    on_error=None,  # and here\n)\nprint(\"Authenticated as tasks-api client.\")\n</pre> # Now initialize the TasksClient client = TasksClient() client.configure(     base_url=BASE_URL,     client_id=TASKS_CLIENT_ID,     client_secret=TASKS_CLIENT_SECRET,     on_auth_token=None,  # we could use a custom handler here     on_auth_error=None,  # and here     on_error=None,  # and here ) print(\"Authenticated as tasks-api client.\") <pre>Authenticated as tasks-api client.\n</pre> In\u00a0[4]: Copied! <pre>current_tasks = client.list_tasks()\nprint(f\"Current tasks: {current_tasks}\")\nfor item in current_tasks.items:\n    if item.status in (\n        TaskStatus.RUNNING,\n        TaskStatus.PENDING,\n        TaskStatus.WAITING_FOR_INPUT,\n    ):\n        # Cancel the task if it's active (running, pending, or waiting for input)\n        print(f\"Cancelling task {item.id} with status {item.status}\")\n        client.cancel_task(item.id)\n</pre> current_tasks = client.list_tasks() print(f\"Current tasks: {current_tasks}\") for item in current_tasks.items:     if item.status in (         TaskStatus.RUNNING,         TaskStatus.PENDING,         TaskStatus.WAITING_FOR_INPUT,     ):         # Cancel the task if it's active (running, pending, or waiting for input)         print(f\"Cancelling task {item.id} with status {item.status}\")         client.cancel_task(item.id) <pre>Current tasks: items=[] total=0 page=1 size=50 pages=0\n</pre> In\u00a0[5]: Copied! <pre># Upload a .waldiez flow\nFLOW_PATH = os.path.join(\".\", \"..\", \"dummy_with_input.waldiez\")\nwith open(FLOW_PATH, \"rb\") as f:\n    file_data = f.read()\n\ntask_create = TaskCreateRequest(\n    file_data=file_data,\n    file_name=FLOW_PATH.rsplit(\"/\", maxsplit=1)[-1],\n    input_timeout=60,\n)\ntask = client.create_task(\n    task_data=task_create,\n)\nprint(\"\ud83d\udce6 Task triggered:\", task.id)\n</pre> # Upload a .waldiez flow FLOW_PATH = os.path.join(\".\", \"..\", \"dummy_with_input.waldiez\") with open(FLOW_PATH, \"rb\") as f:     file_data = f.read()  task_create = TaskCreateRequest(     file_data=file_data,     file_name=FLOW_PATH.rsplit(\"/\", maxsplit=1)[-1],     input_timeout=60, ) task = client.create_task(     task_data=task_create, ) print(\"\ud83d\udce6 Task triggered:\", task.id) <pre>\ud83d\udce6 Task triggered: 019642de84db07476957bad629d93bf4\n</pre> In\u00a0[\u00a0]: Copied! <pre>from queue import Queue\n\nqueue: Queue[str] = Queue()\n\n\ndef on_message(msg: str):\n    print(\"\ud83d\udce5\", msg)\n    queue.put(msg)\n\n\ndef on_error(err: str):\n    print(\"\u274c Error:\", err)\n\n\nclient.start_ws_listener(\n    task_id=task.id, on_message=on_message, on_error=on_error\n)\n</pre> from queue import Queue  queue: Queue[str] = Queue()   def on_message(msg: str):     print(\"\ud83d\udce5\", msg)     queue.put(msg)   def on_error(err: str):     print(\"\u274c Error:\", err)   client.start_ws_listener(     task_id=task.id, on_message=on_message, on_error=on_error ) <pre>\ud83d\udce5 {\"type\":\"status\",\"timestamp\":1744878601497222,\"data\":{\"task_id\":\"019642de84db07476957bad629d93bf4\",\"status\":\"PENDING\",\"created_at\":\"2025-04-17T08:30:01.435\",\"updated_at\":\"2025-04-17T08:30:01.435\",\"results\":null,\"input_request_id\":null}}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Installing requirements: pyautogen[openai]==0.8.6\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878610769533\",\"id\":\"1744878610770-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pyautogen==0.8.6 in /home/user/.local/lib/python3.12/site-packages (from pyautogen[openai]==0.8.6) (0.8.6)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611554864\",\"id\":\"1744878611555-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: anyio&lt;5.0.0,&gt;=3.0.0 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (4.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611570762\",\"id\":\"1744878611570-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: asyncer==0.0.8 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.0.8)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611571332\",\"id\":\"1744878611571-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: diskcache in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (5.6.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611571993\",\"id\":\"1744878611572-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: docker in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (7.1.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611572532\",\"id\":\"1744878611572-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: httpx&lt;1,&gt;=0.28.1 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.28.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573086\",\"id\":\"1744878611573-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: packaging in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (24.2)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573552\",\"id\":\"1744878611573-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pydantic&lt;3,&gt;=2.6.1 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.11.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573990\",\"id\":\"1744878611574-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: python-dotenv in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.1.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611574484\",\"id\":\"1744878611574-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: termcolor in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.0.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611575081\",\"id\":\"1744878611575-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: tiktoken in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611575535\",\"id\":\"1744878611575-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: openai&gt;=1.66.2 in /home/user/.local/lib/python3.12/site-packages (from pyautogen[openai]==0.8.6) (1.75.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611576007\",\"id\":\"1744878611576-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: idna&gt;=2.8 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.10)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611578370\",\"id\":\"1744878611578-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: sniffio&gt;=1.1 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.3.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611578731\",\"id\":\"1744878611578-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: typing_extensions&gt;=4.5 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (4.13.2)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611579104\",\"id\":\"1744878611579-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: certifi in /home/user/.local/lib/python3.12/site-packages (from httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2025.1.31)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611580617\",\"id\":\"1744878611580-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: httpcore==1.* in /home/user/.local/lib/python3.12/site-packages (from httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.0.8)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611581035\",\"id\":\"1744878611581-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: h11&lt;0.15,&gt;=0.13 in /home/user/.local/lib/python3.12/site-packages (from httpcore==1.*-&gt;httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.14.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611582313\",\"id\":\"1744878611582-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: distro&lt;2,&gt;=1.7.0 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (1.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611584243\",\"id\":\"1744878611584-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: jiter&lt;1,&gt;=0.4.0 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (0.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611584687\",\"id\":\"1744878611584-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: tqdm&gt;4 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (4.67.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611585183\",\"id\":\"1744878611585-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: annotated-types&gt;=0.6.0 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.7.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587017\",\"id\":\"1744878611587-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pydantic-core==2.33.1 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.33.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587378\",\"id\":\"1744878611587-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: typing-inspection&gt;=0.4.0 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.4.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587830\",\"id\":\"1744878611587-2\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: requests&gt;=2.26.0 in /home/user/.local/lib/python3.12/site-packages (from docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.32.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611590585\",\"id\":\"1744878611590-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: urllib3&gt;=1.26.0 in /home/user/.local/lib/python3.12/site-packages (from docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.4.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611590940\",\"id\":\"1744878611591-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: regex&gt;=2022.1.18 in /home/user/.local/lib/python3.12/site-packages (from tiktoken-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2024.11.6)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611593672\",\"id\":\"1744878611593-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /home/user/.local/lib/python3.12/site-packages (from requests&gt;=2.26.0-&gt;docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.4.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611598621\",\"id\":\"1744878611598-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirements installed.\\nNOTE: If new packages were added and you are using Jupyter, you might need to restart the kernel.\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612099959\",\"id\":\"1744878612100-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"&lt;Waldiez&gt; - Starting workflow...\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612135204\",\"id\":\"1744878612135-0\"}\n\ud83d\udce5 {\"type\":\"input_request\",\"data\":\"&gt;\",\"password\":\"False\",\"request_id\":\"4f7e210cf20a4284af73fa29bf624fc3\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612145187\",\"id\":\"1744878612145-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Installing requirements: pyautogen[openai]==0.8.6\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878610769533\",\"id\":\"1744878610770-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pyautogen==0.8.6 in /home/user/.local/lib/python3.12/site-packages (from pyautogen[openai]==0.8.6) (0.8.6)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611554864\",\"id\":\"1744878611555-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: anyio&lt;5.0.0,&gt;=3.0.0 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (4.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611570762\",\"id\":\"1744878611570-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: asyncer==0.0.8 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.0.8)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611571332\",\"id\":\"1744878611571-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: diskcache in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (5.6.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611571993\",\"id\":\"1744878611572-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: docker in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (7.1.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611572532\",\"id\":\"1744878611572-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: httpx&lt;1,&gt;=0.28.1 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.28.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573086\",\"id\":\"1744878611573-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: packaging in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (24.2)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573552\",\"id\":\"1744878611573-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pydantic&lt;3,&gt;=2.6.1 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.11.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573990\",\"id\":\"1744878611574-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: python-dotenv in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.1.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611574484\",\"id\":\"1744878611574-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: termcolor in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.0.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611575081\",\"id\":\"1744878611575-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: tiktoken in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611575535\",\"id\":\"1744878611575-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: openai&gt;=1.66.2 in /home/user/.local/lib/python3.12/site-packages (from pyautogen[openai]==0.8.6) (1.75.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611576007\",\"id\":\"1744878611576-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: idna&gt;=2.8 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.10)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611578370\",\"id\":\"1744878611578-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: sniffio&gt;=1.1 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.3.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611578731\",\"id\":\"1744878611578-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: typing_extensions&gt;=4.5 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (4.13.2)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611579104\",\"id\":\"1744878611579-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: certifi in /home/user/.local/lib/python3.12/site-packages (from httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2025.1.31)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611580617\",\"id\":\"1744878611580-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: httpcore==1.* in /home/user/.local/lib/python3.12/site-packages (from httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.0.8)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611581035\",\"id\":\"1744878611581-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: h11&lt;0.15,&gt;=0.13 in /home/user/.local/lib/python3.12/site-packages (from httpcore==1.*-&gt;httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.14.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611582313\",\"id\":\"1744878611582-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: distro&lt;2,&gt;=1.7.0 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (1.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611584243\",\"id\":\"1744878611584-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: jiter&lt;1,&gt;=0.4.0 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (0.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611584687\",\"id\":\"1744878611584-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: tqdm&gt;4 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (4.67.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611585183\",\"id\":\"1744878611585-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: annotated-types&gt;=0.6.0 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.7.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587017\",\"id\":\"1744878611587-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pydantic-core==2.33.1 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.33.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587378\",\"id\":\"1744878611587-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: typing-inspection&gt;=0.4.0 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.4.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587830\",\"id\":\"1744878611587-2\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: requests&gt;=2.26.0 in /home/user/.local/lib/python3.12/site-packages (from docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.32.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611590585\",\"id\":\"1744878611590-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: urllib3&gt;=1.26.0 in /home/user/.local/lib/python3.12/site-packages (from docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.4.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611590940\",\"id\":\"1744878611591-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: regex&gt;=2022.1.18 in /home/user/.local/lib/python3.12/site-packages (from tiktoken-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2024.11.6)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611593672\",\"id\":\"1744878611593-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /home/user/.local/lib/python3.12/site-packages (from requests&gt;=2.26.0-&gt;docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.4.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611598621\",\"id\":\"1744878611598-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirements installed.\\nNOTE: If new packages were added and you are using Jupyter, you might need to restart the kernel.\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612099959\",\"id\":\"1744878612100-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"&lt;Waldiez&gt; - Starting workflow...\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612135204\",\"id\":\"1744878612135-0\"}\n\ud83d\udce5 {\"type\":\"input_request\",\"data\":\"&gt;\",\"password\":\"False\",\"request_id\":\"4f7e210cf20a4284af73fa29bf624fc3\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612145187\",\"id\":\"1744878612145-0\"}\n\ud83d\udce5 {\"request_id\":\"4f7e210cf20a4284af73fa29bf624fc3\",\"type\":\"input_response\",\"data\":\"Hello world!\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878613708989\",\"id\":\"1744878613709-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"{\\\"type\\\":\\\"text\\\",\\\"content\\\":{\\\"uuid\\\":\\\"8f77767f-a82e-4c25-9783-fa12f386ff6c\\\",\\\"content\\\":\\\"Hello world!\\\",\\\"sender\\\":\\\"user1\\\",\\\"recipient\\\":\\\"assistant_1a\\\"}}\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878613713033\",\"id\":\"1744878613713-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"{\\\"type\\\":\\\"text\\\",\\\"content\\\":{\\\"uuid\\\":\\\"8c8691be-ae54-453d-ac79-e50b8311485d\\\",\\\"content\\\":\\\"Hello from Assistant 1A\\\",\\\"sender\\\":\\\"assistant_1a\\\",\\\"recipient\\\":\\\"user1\\\"}}\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878613721054\",\"id\":\"1744878613721-0\"}\n\ud83d\udce5 {\"type\":\"input_request\",\"data\":\"Replying as user1. Provide feedback to assistant_1a. Press enter to skip and use auto-reply, or type 'exit' to end the conversation: \",\"password\":\"False\",\"request_id\":\"07c0ae47c3964f49938cd209bb69505f\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878613721536\",\"id\":\"1744878613721-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Installing requirements: pyautogen[openai]==0.8.6\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878610769533\",\"id\":\"1744878610770-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pyautogen==0.8.6 in /home/user/.local/lib/python3.12/site-packages (from pyautogen[openai]==0.8.6) (0.8.6)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611554864\",\"id\":\"1744878611555-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: anyio&lt;5.0.0,&gt;=3.0.0 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (4.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611570762\",\"id\":\"1744878611570-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: asyncer==0.0.8 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.0.8)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611571332\",\"id\":\"1744878611571-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: diskcache in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (5.6.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611571993\",\"id\":\"1744878611572-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: docker in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (7.1.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611572532\",\"id\":\"1744878611572-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: httpx&lt;1,&gt;=0.28.1 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.28.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573086\",\"id\":\"1744878611573-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: packaging in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (24.2)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573552\",\"id\":\"1744878611573-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pydantic&lt;3,&gt;=2.6.1 in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.11.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611573990\",\"id\":\"1744878611574-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: python-dotenv in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.1.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611574484\",\"id\":\"1744878611574-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: termcolor in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.0.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611575081\",\"id\":\"1744878611575-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: tiktoken in /home/user/.local/lib/python3.12/site-packages (from pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611575535\",\"id\":\"1744878611575-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: openai&gt;=1.66.2 in /home/user/.local/lib/python3.12/site-packages (from pyautogen[openai]==0.8.6) (1.75.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611576007\",\"id\":\"1744878611576-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: idna&gt;=2.8 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.10)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611578370\",\"id\":\"1744878611578-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: sniffio&gt;=1.1 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.3.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611578731\",\"id\":\"1744878611578-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: typing_extensions&gt;=4.5 in /home/user/.local/lib/python3.12/site-packages (from anyio&lt;5.0.0,&gt;=3.0.0-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (4.13.2)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611579104\",\"id\":\"1744878611579-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: certifi in /home/user/.local/lib/python3.12/site-packages (from httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2025.1.31)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611580617\",\"id\":\"1744878611580-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: httpcore==1.* in /home/user/.local/lib/python3.12/site-packages (from httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (1.0.8)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611581035\",\"id\":\"1744878611581-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: h11&lt;0.15,&gt;=0.13 in /home/user/.local/lib/python3.12/site-packages (from httpcore==1.*-&gt;httpx&lt;1,&gt;=0.28.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.14.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611582313\",\"id\":\"1744878611582-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: distro&lt;2,&gt;=1.7.0 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (1.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611584243\",\"id\":\"1744878611584-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: jiter&lt;1,&gt;=0.4.0 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (0.9.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611584687\",\"id\":\"1744878611584-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: tqdm&gt;4 in /home/user/.local/lib/python3.12/site-packages (from openai&gt;=1.66.2-&gt;pyautogen[openai]==0.8.6) (4.67.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611585183\",\"id\":\"1744878611585-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: annotated-types&gt;=0.6.0 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.7.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587017\",\"id\":\"1744878611587-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: pydantic-core==2.33.1 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.33.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587378\",\"id\":\"1744878611587-1\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: typing-inspection&gt;=0.4.0 in /home/user/.local/lib/python3.12/site-packages (from pydantic&lt;3,&gt;=2.6.1-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (0.4.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611587830\",\"id\":\"1744878611587-2\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: requests&gt;=2.26.0 in /home/user/.local/lib/python3.12/site-packages (from docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.32.3)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611590585\",\"id\":\"1744878611590-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: urllib3&gt;=1.26.0 in /home/user/.local/lib/python3.12/site-packages (from docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2.4.0)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611590940\",\"id\":\"1744878611591-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: regex&gt;=2022.1.18 in /home/user/.local/lib/python3.12/site-packages (from tiktoken-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (2024.11.6)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611593672\",\"id\":\"1744878611593-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /home/user/.local/lib/python3.12/site-packages (from requests&gt;=2.26.0-&gt;docker-&gt;pyautogen==0.8.6-&gt;pyautogen[openai]==0.8.6) (3.4.1)\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878611598621\",\"id\":\"1744878611598-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Requirements installed.\\nNOTE: If new packages were added and you are using Jupyter, you might need to restart the kernel.\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612099959\",\"id\":\"1744878612100-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"&lt;Waldiez&gt; - Starting workflow...\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612135204\",\"id\":\"1744878612135-0\"}\n\ud83d\udce5 {\"type\":\"input_request\",\"data\":\"&gt;\",\"password\":\"False\",\"request_id\":\"4f7e210cf20a4284af73fa29bf624fc3\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878612145187\",\"id\":\"1744878612145-0\"}\n\ud83d\udce5 {\"request_id\":\"4f7e210cf20a4284af73fa29bf624fc3\",\"type\":\"input_response\",\"data\":\"Hello world!\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878613708989\",\"id\":\"1744878613709-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"{\\\"type\\\":\\\"text\\\",\\\"content\\\":{\\\"uuid\\\":\\\"8f77767f-a82e-4c25-9783-fa12f386ff6c\\\",\\\"content\\\":\\\"Hello world!\\\",\\\"sender\\\":\\\"user1\\\",\\\"recipient\\\":\\\"assistant_1a\\\"}}\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878613713033\",\"id\":\"1744878613713-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"{\\\"type\\\":\\\"text\\\",\\\"content\\\":{\\\"uuid\\\":\\\"8c8691be-ae54-453d-ac79-e50b8311485d\\\",\\\"content\\\":\\\"Hello from Assistant 1A\\\",\\\"sender\\\":\\\"assistant_1a\\\",\\\"recipient\\\":\\\"user1\\\"}}\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878613721054\",\"id\":\"1744878613721-0\"}\n\ud83d\udce5 {\"type\":\"input_request\",\"data\":\"Replying as user1. Provide feedback to assistant_1a. Press enter to skip and use auto-reply, or type 'exit' to end the conversation: \",\"password\":\"False\",\"request_id\":\"07c0ae47c3964f49938cd209bb69505f\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878613721536\",\"id\":\"1744878613721-1\"}\n\ud83d\udce5 {\"request_id\":\"07c0ae47c3964f49938cd209bb69505f\",\"type\":\"input_response\",\"data\":\"Hello world!\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878615805819\",\"id\":\"1744878615805-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"{\\\"type\\\":\\\"text\\\",\\\"content\\\":{\\\"uuid\\\":\\\"9156a71b-ebf9-47d9-bf99-2fa7c5a645ac\\\",\\\"content\\\":\\\"Hello world!\\\",\\\"sender\\\":\\\"user1\\\",\\\"recipient\\\":\\\"assistant_1a\\\"}}\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878615811415\",\"id\":\"1744878615811-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"{\\\"type\\\":\\\"text\\\",\\\"content\\\":{\\\"uuid\\\":\\\"27843a33-34d2-4dcb-89f6-81b835230e46\\\",\\\"content\\\":\\\"Hello from Assistant 1A\\\",\\\"sender\\\":\\\"assistant_1a\\\",\\\"recipient\\\":\\\"user1\\\"}}\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878615819496\",\"id\":\"1744878615819-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"{\\\"type\\\":\\\"termination\\\",\\\"content\\\":{\\\"uuid\\\":\\\"c514d10b-6883-40aa-ac47-83e14b1752d3\\\",\\\"termination_reason\\\":\\\"Maximum turns (2) reached\\\"}}\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878615820131\",\"id\":\"1744878615820-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"&lt;Waldiez&gt; - Workflow finished\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878615823488\",\"id\":\"1744878615823-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Generating mermaid sequence diagram...\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878615823991\",\"id\":\"1744878615824-0\"}\n\ud83d\udce5 {\"type\":\"print\",\"data\":\"Copying the results to /tmp/tmp_fewsaoj/019642de83369649c2862c6307b74986/019642de84db07476957bad629d93bf4/app/waldiez_out/20250417083015\\n\",\"task_id\":\"019642de84db07476957bad629d93bf4\",\"timestamp\":\"1744878615828013\",\"id\":\"1744878615828-0\"}\n</pre> In\u00a0[7]: Copied! <pre>def send_input(request_id: str, data: str):\n    input_msg = UserInputRequest(\n        task_id=task.id,\n        request_id=request_id,\n        data=data,\n    )\n    # alternatively, as plain dict:\n    # input_msg = {\n    #     \"task_id\": task.id,\n    #     \"request_id\": request_id,\n    #     \"data\": data,\n    # }\n    client.send_user_input(request_data=input_msg)\n</pre> def send_input(request_id: str, data: str):     input_msg = UserInputRequest(         task_id=task.id,         request_id=request_id,         data=data,     )     # alternatively, as plain dict:     # input_msg = {     #     \"task_id\": task.id,     #     \"request_id\": request_id,     #     \"data\": data,     # }     client.send_user_input(request_data=input_msg) In\u00a0[8]: Copied! <pre>import time\n\nwhile True:\n    current = client.get_task_status(task_id=task.id)\n    if current.status in (\n        TaskStatus.COMPLETED,\n        TaskStatus.FAILED,\n        TaskStatus.CANCELLED,\n    ):\n        print(\"Finished:\", current.status)\n        break\n    print(\"\u23f3 Status:\", current.status)\n    if current.status == TaskStatus.WAITING_FOR_INPUT:\n        send_input(request_id=current.input_request_id, data=\"Hello world!\")\n    time.sleep(2)\n\nzip_data = client.download_task_results(task_id=task.id)\nwith open(\"results.zip\", \"wb\") as f:\n    f.write(zip_data)\nprint(\"\ud83d\udcc1 Results saved to results.zip\")\n</pre> import time  while True:     current = client.get_task_status(task_id=task.id)     if current.status in (         TaskStatus.COMPLETED,         TaskStatus.FAILED,         TaskStatus.CANCELLED,     ):         print(\"Finished:\", current.status)         break     print(\"\u23f3 Status:\", current.status)     if current.status == TaskStatus.WAITING_FOR_INPUT:         send_input(request_id=current.input_request_id, data=\"Hello world!\")     time.sleep(2)  zip_data = client.download_task_results(task_id=task.id) with open(\"results.zip\", \"wb\") as f:     f.write(zip_data) print(\"\ud83d\udcc1 Results saved to results.zip\") <pre>\u23f3 Status: TaskStatus.PENDING\n\u23f3 Status: TaskStatus.PENDING\n\u23f3 Status: TaskStatus.PENDING\n\u23f3 Status: TaskStatus.PENDING\n\u23f3 Status: TaskStatus.PENDING\n\u23f3 Status: TaskStatus.RUNNING\n\u23f3 Status: TaskStatus.WAITING_FOR_INPUT\n\u23f3 Status: TaskStatus.WAITING_FOR_INPUT\nFinished: TaskStatus.COMPLETED\n\ud83d\udcc1 Results saved to results.zip\n</pre> In\u00a0[9]: Copied! <pre>import os\nimport zipfile\n\n# Unzip the results\nwith zipfile.ZipFile(\"results.zip\", \"r\") as zip_ref:\n    zip_ref.extractall(\"results\")\nprint(\"\ud83d\udcc2 Unzipped results to results\")\nfor root, dirs, files in os.walk(\"results\"):\n    for file in files:\n        print(f\"\ud83d\udcc4 {file}\")\n</pre> import os import zipfile  # Unzip the results with zipfile.ZipFile(\"results.zip\", \"r\") as zip_ref:     zip_ref.extractall(\"results\") print(\"\ud83d\udcc2 Unzipped results to results\") for root, dirs, files in os.walk(\"results\"):     for file in files:         print(f\"\ud83d\udcc4 {file}\") <pre>\ud83d\udcc2 Unzipped results to results\n\ud83d\udcc4 dummy_with_input.waldiez\n\ud83d\udcc4 waldiez_flow_api_keys.py\n\ud83d\udcc4 dummy_with_input.py\n\ud83d\udcc4 Waldiez flow.mmd\n\ud83d\udcc4 flow.db\n\ud83d\udcc4 oai_wrappers.csv\n\ud83d\udcc4 oai_clients.csv\n\ud83d\udcc4 version.json\n\ud83d\udcc4 function_calls.csv\n\ud83d\udcc4 events.json\n\ud83d\udcc4 chat_completions.json\n\ud83d\udcc4 version.csv\n\ud83d\udcc4 agents.json\n\ud83d\udcc4 function_calls.json\n\ud83d\udcc4 oai_wrappers.json\n\ud83d\udcc4 oai_clients.json\n\ud83d\udcc4 chat_completions.csv\n\ud83d\udcc4 agents.csv\n\ud83d\udcc4 events.csv\n</pre> In\u00a0[10]: Copied! <pre>import shutil\nimport os\n\n# Clean up the results\nif os.path.exists(\"results\"):\n    shutil.rmtree(\"results\")\n    print(\"\ud83d\uddd1\ufe0f Deleted results directory.\")\n\nif os.path.exists(\"results.zip\"):\n    os.remove(\"results.zip\")\n    print(\"\ud83d\uddd1\ufe0f Deleted results.zip\")\n\nif CREATED_NEW_CLIENT:\n    clients_admin = ClientsAdmin()\n    clients_admin.configure(BASE_URL, CLIENT_ID, CLIENT_SECRET)\n    clients_admin.delete_client(client_id=TASKS_CLIENT_ID)\n    print(\"\ud83d\uddd1\ufe0f Deleted tasks-api client.\")\n\nos.environ.pop(\"WALDIEZ_CLIENT_ID\", None)\nos.environ.pop(\"WALDIEZ_CLIENT_SECRET\", None)\nos.environ.pop(\"WALDIEZ_AUDIENCE\", None)\nprint(\"\ud83d\uddd1\ufe0f Deleted environment variables.\")\n</pre> import shutil import os  # Clean up the results if os.path.exists(\"results\"):     shutil.rmtree(\"results\")     print(\"\ud83d\uddd1\ufe0f Deleted results directory.\")  if os.path.exists(\"results.zip\"):     os.remove(\"results.zip\")     print(\"\ud83d\uddd1\ufe0f Deleted results.zip\")  if CREATED_NEW_CLIENT:     clients_admin = ClientsAdmin()     clients_admin.configure(BASE_URL, CLIENT_ID, CLIENT_SECRET)     clients_admin.delete_client(client_id=TASKS_CLIENT_ID)     print(\"\ud83d\uddd1\ufe0f Deleted tasks-api client.\")  os.environ.pop(\"WALDIEZ_CLIENT_ID\", None) os.environ.pop(\"WALDIEZ_CLIENT_SECRET\", None) os.environ.pop(\"WALDIEZ_AUDIENCE\", None) print(\"\ud83d\uddd1\ufe0f Deleted environment variables.\") <pre>\ud83d\uddd1\ufe0f Deleted results directory.\n\ud83d\uddd1\ufe0f Deleted results.zip\n\ud83d\uddd1\ufe0f Deleted tasks-api client.\n\ud83d\uddd1\ufe0f Deleted environment variables.\n</pre>"},{"location":"examples/task_demo/#waldiez-runner-jupyter-notebook-example","title":"Waldiez Runner: Jupyter Notebook Example\u00b6","text":"<p>This notebook demonstrates how to interact with the Waldiez Runner server using the client SDK. It covers:</p> <ul> <li>Authentication (via <code>clients-api</code> or <code>tasks-api</code>)</li> <li>Creating and managing tasks</li> <li>Listening to task output via WebSocket</li> <li>Sending input to running tasks</li> <li>Downloading results</li> </ul>"},{"location":"examples/task_demo/#authentication","title":"\ud83d\udd10 Authentication\u00b6","text":""},{"location":"examples/task_demo/#cancel-any-existing-running-tasks-if-any","title":"\ud83d\udeab Cancel any existing running tasks if any\u00b6","text":""},{"location":"examples/task_demo/#submit-a-new-task","title":"\ud83d\udce5 Submit a New Task\u00b6","text":""},{"location":"examples/task_demo/#listen-to-task-output","title":"\ud83d\udce1 Listen to Task Output\u00b6","text":""},{"location":"examples/task_demo/#send-input-if-prompted","title":"\ud83c\udfa4 Send Input (if prompted)\u00b6","text":""},{"location":"examples/task_demo/#wait-for-completion-and-download-results","title":"\u23f3 Wait for Completion and Download Results\u00b6","text":""},{"location":"examples/task_demo/#cleanup","title":"\ud83d\uddd1\ufe0f Cleanup\u00b6","text":""},{"location":"reference/client/","title":"Client","text":""},{"location":"reference/client/#clients-admin","title":"Clients Admin","text":"<p>Waldiez serve client admin.</p>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin","title":"<code>ClientsAdmin(base_url: str | None = None, client_id: str | None = None, client_secret: str | None = None, on_auth_token: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_auth_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None)</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Client admin class. For interacting with /clients endpoints.</p> <p>Attributes:</p> Name Type Description <code>clients</code> <code>ClientsAPIClient | None</code> <p>ClientsAPIClient instance for client management</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>def __init__(\n    self,\n    base_url: str | None = None,\n    client_id: str | None = None,\n    client_secret: str | None = None,\n    on_auth_token: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_auth_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n) -&gt; None:\n    \"\"\"Initialize the client admin with optional late configuration.\"\"\"\n    self.clients = None\n    super().__init__(\n        base_url=base_url,\n        client_id=client_id,\n        client_secret=client_secret,\n        on_auth_token=on_auth_token,\n        on_auth_error=on_auth_error,\n        on_error=on_error,\n    )\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.a_create_client","title":"<code>a_create_client(client_data: ClientCreateRequest | Dict[str, Any]) -&gt; ClientCreateResponse</code>  <code>async</code>","text":"<p>Create a new client asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>client_data</code> <code>Dict[str, Any]</code> <p>The client data</p> required <p>Returns:</p> Type Description <code>ClientCreateResponse</code> <p>The client create response</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>async def a_create_client(\n    self,\n    client_data: ClientCreateRequest | Dict[str, Any],\n) -&gt; ClientCreateResponse:\n    \"\"\"Create a new client asynchronously.\n\n    Parameters\n    ----------\n    client_data : Dict[str, Any]\n        The client data\n\n    Returns\n    -------\n    ClientCreateResponse\n        The client create response\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    client_create: ClientCreateRequest = (\n        client_data\n        if not isinstance(client_data, dict)\n        else ClientCreateRequest.model_validate(client_data)\n    )\n    response = await self.clients.a_create_client(  # type: ignore\n        client_data=client_create.model_dump(exclude_none=True),\n    )\n    return ClientCreateResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.a_delete_client","title":"<code>a_delete_client(client_id: str) -&gt; None</code>  <code>async</code>","text":"<p>Delete a client asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>async def a_delete_client(self, client_id: str) -&gt; None:\n    \"\"\"Delete a client asynchronously.\n\n    Parameters\n    ----------\n    client_id : str\n        The client ID\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    await self.clients.a_delete_client(client_id)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.a_delete_clients","title":"<code>a_delete_clients(ids: List[str] | None = None, audiences: List[str] | None = None) -&gt; None</code>  <code>async</code>","text":"<p>Delete multiple clients asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>List[str] | None</code> <p>The client IDs to filter for deletion. If None, all clients will be deleted. (not the one used for this request)</p> <code>None</code> <code>audiences</code> <code>List[str] | None</code> <p>The audiences to filter.</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>async def a_delete_clients(\n    self,\n    ids: List[str] | None = None,\n    audiences: List[str] | None = None,\n) -&gt; None:\n    \"\"\"Delete multiple clients asynchronously.\n\n    Parameters\n    ----------\n    ids : List[str] | None, optional\n        The client IDs to filter for deletion.\n        If None, all clients will be deleted.\n        (not the one used for this request)\n    audiences : List[str] | None, optional\n        The audiences to filter.\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    await self.clients.a_delete_clients(ids, audiences)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.a_get_client","title":"<code>a_get_client(client_id: str) -&gt; ClientResponse</code>  <code>async</code>","text":"<p>Retrieve a specific client asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID</p> required <p>Returns:</p> Type Description <code>ClientResponse</code> <p>The client response</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>async def a_get_client(self, client_id: str) -&gt; ClientResponse:\n    \"\"\"Retrieve a specific client asynchronously.\n\n    Parameters\n    ----------\n    client_id : str\n        The client ID\n\n    Returns\n    -------\n    ClientResponse\n        The client response\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    response = await self.clients.a_get_client(client_id)  # type: ignore\n    return ClientResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.a_list_clients","title":"<code>a_list_clients() -&gt; ClientItemsResponse</code>  <code>async</code>","text":"<p>Retrieve the list of clients asynchronously.</p> <p>Returns:</p> Type Description <code>ClientItemsResponse</code> <p>The paginated clients response (\"items\" key in JSON)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>async def a_list_clients(self) -&gt; ClientItemsResponse:\n    \"\"\"Retrieve the list of clients asynchronously.\n\n    Returns\n    -------\n    ClientItemsResponse\n        The paginated clients response (\"items\" key in JSON)\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    response = await self.clients.a_list_clients()  # type: ignore\n    return ClientItemsResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.a_update_client","title":"<code>a_update_client(client_id: str, description: str | None = None) -&gt; ClientResponse</code>  <code>async</code>","text":"<p>Update an existing client asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID</p> required <code>description</code> <code>str | None</code> <p>The client description, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>ClientResponse</code> <p>The client response</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>async def a_update_client(\n    self,\n    client_id: str,\n    description: str | None = None,\n) -&gt; ClientResponse:\n    \"\"\"Update an existing client asynchronously.\n\n    Parameters\n    ----------\n    client_id : str\n        The client ID\n    description : str | None, optional\n        The client description, by default None\n\n    Returns\n    -------\n    ClientResponse\n        The client response\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    update_data = {\n        \"description\": description,\n    }\n    response = await self.clients.a_update_client(  # type: ignore\n        client_id=client_id,\n        update_data=update_data,\n    )\n    return ClientResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.configure","title":"<code>configure(base_url: str, client_id: str, client_secret: str, on_auth_token: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_auth_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None) -&gt; None</code>","text":"<p>Configure the authentication and Clients API client.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The base URL</p> required <code>client_id</code> <code>str</code> <p>The client ID</p> required <code>client_secret</code> <code>str</code> <p>The client secret</p> required <code>on_auth_token</code> <code>Callable[[str], None]</code> <pre><code>      | Callable[[str], Coroutine[Any, Any, None]]\n      | None, optional\n</code></pre> <p>The function to call on token retrieval, by default None</p> <code>None</code> <code>on_auth_error</code> <code>Callable[[str], None]</code> <pre><code>      | Callable[[str], Coroutine[Any, Any, None]]\n      | None, optional\n</code></pre> <p>The function to call on auth error, by default None</p> <code>None</code> <code>on_error</code> <code>Callable[[str], None]</code> <pre><code> | Callable[[str], Coroutine[Any, Any, None]]\n | None, optional\n</code></pre> <p>The function to call on tasks API error, by default None (or self.on_error)</p> <code>None</code> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>def configure(\n    self,\n    base_url: str,\n    client_id: str,\n    client_secret: str,\n    on_auth_token: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_auth_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n) -&gt; None:\n    \"\"\"Configure the authentication and Clients API client.\n\n    Parameters\n    ----------\n    base_url : str\n        The base URL\n    client_id : str\n        The client ID\n    client_secret : str\n        The client secret\n    on_auth_token : Callable[[str], None]\n                  | Callable[[str], Coroutine[Any, Any, None]]\n                  | None, optional\n        The function to call on token retrieval, by default None\n    on_auth_error : Callable[[str], None]\n                  | Callable[[str], Coroutine[Any, Any, None]]\n                  | None, optional\n        The function to call on auth error, by default None\n    on_error : Callable[[str], None]\n             | Callable[[str], Coroutine[Any, Any, None]]\n             | None, optional\n        The function to call on tasks API error,\n        by default None (or self.on_error)\n    \"\"\"\n    super().configure(\n        base_url=base_url,\n        client_id=client_id,\n        client_secret=client_secret,\n        on_auth_token=on_auth_token,\n        on_auth_error=on_auth_error,\n        on_error=on_error,\n    )\n    if client_id and client_secret:  # pragma: no branch\n        self.clients = ClientsAPIClient(\n            auth=self.auth,\n            on_error=self.on_error,\n        )\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.create_client","title":"<code>create_client(client_data: ClientCreateRequest | Dict[str, Any]) -&gt; ClientCreateResponse</code>","text":"<p>Create a new client synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>client_data</code> <code>ClientCreateRequest | Dict[str, Any]</code> <p>The client data</p> required <p>Returns:</p> Type Description <code>ClientCreateResponse</code> <p>The client create response</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>def create_client(\n    self,\n    client_data: ClientCreateRequest | Dict[str, Any],\n) -&gt; ClientCreateResponse:\n    \"\"\"Create a new client synchronously.\n\n    Parameters\n    ----------\n    client_data : ClientCreateRequest | Dict[str, Any]\n        The client data\n\n    Returns\n    -------\n    ClientCreateResponse\n        The client create response\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    client_create: ClientCreateRequest = (\n        client_data\n        if not isinstance(client_data, dict)\n        else ClientCreateRequest.model_validate(client_data)\n    )\n    response = self.clients.create_client(  # type: ignore\n        client_data=client_create.model_dump(exclude_none=True),\n    )\n    return ClientCreateResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.delete_client","title":"<code>delete_client(client_id: str) -&gt; None</code>","text":"<p>Delete a client synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>def delete_client(self, client_id: str) -&gt; None:\n    \"\"\"Delete a client synchronously.\n\n    Parameters\n    ----------\n    client_id : str\n        The client ID\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    self.clients.delete_client(client_id)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.delete_clients","title":"<code>delete_clients(ids: List[str] | None = None, audiences: List[ClientAudience] | None = None) -&gt; None</code>","text":"<p>Delete multiple clients synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>List[str] | None</code> <p>The client IDs to filter for deletion. If None, all clients will be deleted. (not the one used for this request)</p> <code>None</code> <code>audiences</code> <code>List[ClientAudience] | None</code> <p>The audiences to filter for deletion. If None, all clients will be deleted. (not the one used for this request) )</p> <code>None</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>def delete_clients(\n    self,\n    ids: List[str] | None = None,\n    audiences: List[ClientAudience] | None = None,\n) -&gt; None:\n    \"\"\"Delete multiple clients synchronously.\n\n    Parameters\n    ----------\n    ids : List[str] | None, optional\n        The client IDs to filter for deletion.\n        If None, all clients will be deleted.\n        (not the one used for this request)\n    audiences : List[ClientAudience] | None, optional\n        The audiences to filter for deletion.\n        If None, all clients will be deleted.\n        (not the one used for this request) )\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    self.clients.delete_clients(ids, audiences)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.get_client","title":"<code>get_client(client_id: str) -&gt; ClientResponse</code>","text":"<p>Retrieve a specific client synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID</p> required <p>Returns:</p> Type Description <code>ClientResponse</code> <p>The client response</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>def get_client(self, client_id: str) -&gt; ClientResponse:\n    \"\"\"Retrieve a specific client synchronously.\n\n    Parameters\n    ----------\n    client_id : str\n        The client ID\n\n    Returns\n    -------\n    ClientResponse\n        The client response\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    response = self.clients.get_client(client_id)  # type: ignore\n    return ClientResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.list_clients","title":"<code>list_clients(params: ClientItemsRequest | Dict[str, Any] | None = None) -&gt; ClientItemsResponse</code>","text":"<p>Retrieve the list of clients synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>ClientItemsRequest | Dict[str, Any] | None</code> <p>The request (pagination) parameters, by default None If None, defaults to ClientItemsRequest with default values</p> <code>None</code> <p>Returns:</p> Type Description <code>CLientItemsResponse</code> <p>The paginated clients response (\"items\" key in JSON)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>def list_clients(\n    self,\n    params: ClientItemsRequest | Dict[str, Any] | None = None,\n) -&gt; ClientItemsResponse:\n    \"\"\"Retrieve the list of clients synchronously.\n\n    Parameters\n    ----------\n    params : ClientItemsRequest | Dict[str, Any] | None, optional\n        The request (pagination) parameters, by default None\n        If None, defaults to ClientItemsRequest with default values\n\n    Returns\n    -------\n    CLientItemsResponse\n        The paginated clients response (\"items\" key in JSON)\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    params_dict: Dict[str, Any] | None\n    if params is None:\n        params_dict = None\n    elif isinstance(params, dict):\n        params_dict = ClientItemsRequest.model_validate(params).model_dump(\n            exclude_none=True\n        )\n    else:\n        params_dict = params.model_dump(exclude_none=True)\n    response = self.clients.list_clients(params=params_dict)  # type: ignore\n    return ClientItemsResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.clients_admin.ClientsAdmin.update_client","title":"<code>update_client(client_id: str, name: str | None = None, description: str | None = None) -&gt; ClientResponse</code>","text":"<p>Update an existing client synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID</p> required <code>name</code> <code>str | None</code> <p>The client name, by default None</p> <code>None</code> <code>description</code> <code>str | None</code> <p>The client description, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>ClientResponse</code> <p>The client response</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/clients_admin.py</code> <pre><code>def update_client(\n    self,\n    client_id: str,\n    name: str | None = None,\n    description: str | None = None,\n) -&gt; ClientResponse:\n    \"\"\"Update an existing client synchronously.\n\n    Parameters\n    ----------\n    client_id : str\n        The client ID\n    name : str | None, optional\n        The client name, by default None\n    description : str | None, optional\n        The client description, by default None\n\n    Returns\n    -------\n    ClientResponse\n        The client response\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    update_data = {\n        \"description\": description,\n    }\n    if name:\n        update_data[\"name\"] = name\n    response = self.clients.update_client(  # type: ignore\n        client_id=client_id,\n        update_data=update_data,\n    )\n    return ClientResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#tasks-client","title":"Tasks Client","text":"<p>Waldiez serve tasks client.</p>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient","title":"<code>TasksClient(base_url: str | None = None, client_id: str | None = None, client_secret: str | None = None, on_auth_token: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_auth_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None)</code>","text":"<p>               Bases: <code>BaseClient</code></p> <p>Tasks client implementation.</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def __init__(\n    self,\n    base_url: str | None = None,\n    client_id: str | None = None,\n    client_secret: str | None = None,\n    on_auth_token: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_auth_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n) -&gt; None:\n    \"\"\"Initialize the tasks client with optional late configuration.\"\"\"\n    self.tasks = None\n    self.ws_sync = None\n    self.ws_async = None\n    super().__init__(\n        base_url=base_url,\n        client_id=client_id,\n        client_secret=client_secret,\n        on_auth_token=on_auth_token,\n        on_auth_error=on_auth_error,\n        on_error=on_error,\n    )\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_cancel_task","title":"<code>a_cancel_task(task_id: str) -&gt; TaskResponse</code>  <code>async</code>","text":"<p>Cancel or delete a task asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID</p> required <p>Returns:</p> Type Description <code>TaskResponse</code> <p>The response JSON (see TaskResponse for details)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_cancel_task(self, task_id: str) -&gt; TaskResponse:\n    \"\"\"Cancel or delete a task asynchronously.\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID\n\n    Returns\n    -------\n    TaskResponse\n        The response JSON\n        (see TaskResponse for details)\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    response = await self.tasks.a_cancel_task(task_id)  # type: ignore\n    return TaskResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_create_task","title":"<code>a_create_task(task_data: TaskCreateRequest | Dict[str, Any]) -&gt; TaskResponse</code>  <code>async</code>","text":"<p>Trigger a new task asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>task_data</code> <code>TaskCreateRequest | Dict[str, Any]</code> <p>The task data (see TaskCreateRequest for details)</p> required <p>Returns:</p> Type Description <code>TaskResponse</code> <p>The response JSON (see TaskResponse for details)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_create_task(\n    self,\n    task_data: TaskCreateRequest | Dict[str, Any],\n) -&gt; TaskResponse:\n    \"\"\"Trigger a new task asynchronously.\n\n    Parameters\n    ----------\n    task_data : TaskCreateRequest | Dict[str, Any]\n        The task data\n        (see TaskCreateRequest for details)\n\n    Returns\n    -------\n    TaskResponse\n        The response JSON\n        (see TaskResponse for details)\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    if isinstance(task_data, dict):\n        task_data = TaskCreateRequest.model_validate(task_data)\n    file_data = task_data.file_data\n    file_name = task_data.file_name\n    input_timeout = task_data.input_timeout\n    response = await self.tasks.a_create_task(  # type: ignore\n        file_data,\n        file_name,\n        input_timeout=input_timeout,\n    )\n    return TaskResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_delete_task","title":"<code>a_delete_task(task_id: str, force: bool = False) -&gt; None</code>  <code>async</code>","text":"<p>Delete a task asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID</p> required <code>force</code> <code>bool</code> <p>Whether to force delete the task (even if active), by default False</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_delete_task(self, task_id: str, force: bool = False) -&gt; None:\n    \"\"\"Delete a task asynchronously.\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID\n    force : bool, optional\n        Whether to force delete the task (even if active), by default False\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    await self.tasks.a_delete_task(task_id, force=force)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_delete_tasks","title":"<code>a_delete_tasks(ids: List[str] | None = None, force: bool = False) -&gt; None</code>  <code>async</code>","text":"<p>Delete all tasks asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>List[str] | None</code> <p>The list of task IDs to delete, by default None If None, all tasks will be deleted.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Whether to force delete the tasks (even if active), by default False</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_delete_tasks(\n    self,\n    ids: List[str] | None = None,\n    force: bool = False,\n) -&gt; None:\n    \"\"\"Delete all tasks asynchronously.\n\n    Parameters\n    ----------\n    ids : List[str] | None, optional\n        The list of task IDs to delete, by default None\n        If None, all tasks will be deleted.\n    force : bool, optional\n        Whether to force delete the tasks (even if active), by default False\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    await self.tasks.a_delete_tasks(ids=ids, force=force)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_download_task_results","title":"<code>a_download_task_results(task_id: str) -&gt; BytesIO</code>  <code>async</code>","text":"<p>Download a completed task's result archive asynchronously as BytesIO.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID</p> required <p>Returns:</p> Type Description <code>BytesIO</code> <p>The results archive as BytesIO</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_download_task_results(self, task_id: str) -&gt; BytesIO:\n    \"\"\"Download a completed task's result archive asynchronously as BytesIO.\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID\n\n    Returns\n    -------\n    BytesIO\n        The results archive as BytesIO\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    return await self.tasks.a_download_task_results(task_id)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_get_task_status","title":"<code>a_get_task_status(task_id: str) -&gt; TaskResponse</code>  <code>async</code>","text":"<p>Retrieve the status of a task asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID</p> required <p>Returns:</p> Type Description <code>TaskResponse</code> <p>The response JSON (see TaskResponse for details)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_get_task_status(self, task_id: str) -&gt; TaskResponse:\n    \"\"\"Retrieve the status of a task asynchronously.\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID\n\n    Returns\n    -------\n    TaskResponse\n        The response JSON\n        (see TaskResponse for details)\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    response = await self.tasks.a_get_task_status(task_id)  # type: ignore\n    return TaskResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_is_listening","title":"<code>a_is_listening() -&gt; bool</code>  <code>async</code>","text":"<p>Check if the WebSocket listener is running asynchronously.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the WebSocket listener is running</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_is_listening(self) -&gt; bool:\n    \"\"\"Check if the WebSocket listener is running asynchronously.\n\n    Returns\n    -------\n    bool\n        Whether the WebSocket listener is running\n    \"\"\"\n    if self.ws_async:\n        return self.ws_async.is_listening()\n    return False\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_list_tasks","title":"<code>a_list_tasks(params: TaskItemsRequest | Dict[str, Any] | None = None) -&gt; TaskItemsResponse</code>  <code>async</code>","text":"<p>List tasks asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>TaskItemsRequest | Dict[str, Any] | None</code> <p>The query parameters for pagination, by default None (see TaskItemsRequest for details)</p> <code>None</code> <p>Returns:</p> Type Description <code>TaskItemsResponse</code> <p>The (paginated) task items response</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_list_tasks(\n    self,\n    params: TaskItemsRequest | Dict[str, Any] | None = None,\n) -&gt; TaskItemsResponse:\n    \"\"\"List tasks asynchronously.\n\n    Parameters\n    ----------\n    params : TaskItemsRequest | Dict[str, Any] | None, optional\n        The query parameters for pagination, by default None\n        (see TaskItemsRequest for details)\n    Returns\n    -------\n    TaskItemsResponse\n        The (paginated) task items response\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    params_dict: Dict[str, Any] | None\n    if params is None:\n        params_dict = None\n    elif isinstance(params, dict):\n        params_dict = TaskItemsRequest.model_validate(params).model_dump(\n            exclude_none=True\n        )\n    else:\n        params_dict = params.model_dump(exclude_none=True)\n    response = await self.tasks.a_list_tasks(params_dict)  # type: ignore\n    return TaskItemsResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.a_send_user_input","title":"<code>a_send_user_input(request_data: UserInputRequest | Dict[str, Any], use_rest: bool = False) -&gt; None</code>  <code>async</code>","text":"<p>Send user input to a task asynchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>UserInputRequest | Dict[str, Any]</code> <p>The user input request data</p> required <code>use_rest</code> <code>bool</code> <p>Whether to use REST API instead of first trying WebSocket, by default False</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def a_send_user_input(\n    self,\n    request_data: UserInputRequest | Dict[str, Any],\n    use_rest: bool = False,\n) -&gt; None:\n    \"\"\"Send user input to a task asynchronously.\n\n    Parameters\n    ----------\n    request_data : UserInputRequest | Dict[str, Any]\n        The user input request data\n    use_rest : bool, optional\n        Whether to use REST API instead of first trying WebSocket,\n        by default False\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    if isinstance(request_data, dict):\n        request_data = UserInputRequest.model_validate(request_data)\n    task_id = request_data.task_id\n    user_input = request_data.data\n    request_id = request_data.request_id\n    sent = False\n    if use_rest is False:  # pragma: no branch\n        # first check/try using websockets\n        if self.ws_async and self.ws_async.is_listening():\n            # pylint: disable=broad-exception-caught\n            try:\n                message = {\n                    \"data\": user_input,\n                    \"request_id\": request_id,\n                }\n                await self.ws_async.send(task_id, json.dumps(message))\n                sent = True\n            except BaseException as e:  # pragma: no cover\n                self._handle_error(\n                    f\"Error sending user input via WebSocket: {e}\"\n                )\n    if not sent:\n        await self.tasks.a_send_user_input(  # type: ignore\n            task_id=task_id,\n            user_input=user_input,\n            request_id=request_id,\n        )\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.aclose","title":"<code>aclose() -&gt; None</code>  <code>async</code>","text":"<p>Async close for WebSocket and tasks.</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def aclose(self) -&gt; None:\n    \"\"\"Async close for WebSocket and tasks.\"\"\"\n    if self.ws_async:  # pragma: no branch\n        await self.ws_async.stop()\n    if self.ws_sync:  # pragma: no branch\n        self.ws_sync.stop()\n    self.ws_sync = None\n    self.ws_async = None\n    self.tasks = None\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.cancel_task","title":"<code>cancel_task(task_id: str) -&gt; TaskResponse</code>","text":"<p>Cancel a task synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID</p> required <p>Returns:</p> Type Description <code>TaskResponse</code> <p>The response JSON</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def cancel_task(self, task_id: str) -&gt; TaskResponse:\n    \"\"\"Cancel a task synchronously.\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID\n\n    Returns\n    -------\n    TaskResponse\n        The response JSON\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    response = self.tasks.cancel_task(task_id)  # type: ignore\n    return TaskResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.close","title":"<code>close() -&gt; None</code>","text":"<p>Close the client properly.</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def close(self) -&gt; None:\n    \"\"\"Close the client properly.\"\"\"\n    if self.ws_sync:\n        self.ws_sync.stop()\n    if self.ws_async:  # pragma: no branch\n        try:\n            loop = asyncio.get_running_loop()\n            loop.create_task(self.ws_async.stop())  # pragma: no cover\n        except RuntimeError:\n            asyncio.run(self.ws_async.stop())\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.configure","title":"<code>configure(base_url: str, client_id: str, client_secret: str, on_auth_token: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_auth_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None) -&gt; None</code>","text":"<p>Configure the authentication and task API client.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The base URL</p> required <code>client_id</code> <code>str</code> <p>The client ID</p> required <code>client_secret</code> <code>str</code> <p>The client secret</p> required <code>on_auth_token</code> <code>Callable[[str], None]</code> <pre><code>      | Callable[[str], Coroutine[Any, Any, None]]\n      | None, optional\n</code></pre> <p>The function to call on token retrieval, by default None</p> <code>None</code> <code>on_auth_error</code> <code>Callable[[str], None]</code> <pre><code>      | Callable[[str], Coroutine[Any, Any, None]]\n      | None, optional\n</code></pre> <p>The function to call on auth error, by default None</p> <code>None</code> <code>on_error</code> <code>Callable[[str], None]</code> <pre><code> | Callable[[str], Coroutine[Any, Any, None]]\n | None, optional\n</code></pre> <p>The function to call on tasks API error, by default None (or self.on_error)</p> <code>None</code> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def configure(\n    self,\n    base_url: str,\n    client_id: str,\n    client_secret: str,\n    on_auth_token: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_auth_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n) -&gt; None:\n    \"\"\"Configure the authentication and task API client.\n\n    Parameters\n    ----------\n    base_url : str\n        The base URL\n    client_id : str\n        The client ID\n    client_secret : str\n        The client secret\n    on_auth_token : Callable[[str], None]\n                  | Callable[[str], Coroutine[Any, Any, None]]\n                  | None, optional\n        The function to call on token retrieval, by default None\n    on_auth_error : Callable[[str], None]\n                  | Callable[[str], Coroutine[Any, Any, None]]\n                  | None, optional\n        The function to call on auth error, by default None\n    on_error : Callable[[str], None]\n             | Callable[[str], Coroutine[Any, Any, None]]\n             | None, optional\n        The function to call on tasks API error,\n        by default None (or self.on_error)\n    \"\"\"\n    super().configure(\n        base_url=base_url,\n        client_id=client_id,\n        client_secret=client_secret,\n        on_auth_token=on_auth_token,\n        on_auth_error=on_auth_error,\n        on_error=on_error,\n    )\n    if client_id and client_secret and self.auth:\n        self.tasks = TasksAPIClient(\n            self.auth,\n            on_error=self._handle_error,\n        )\n        self.ws_sync = SyncWebSocketClient(self.auth)\n        self.ws_async = AsyncWebSocketClient(self.auth)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.create_task","title":"<code>create_task(task_data: TaskCreateRequest | Dict[str, Any]) -&gt; TaskResponse</code>","text":"<p>Trigger a new task synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>task_data</code> <code>TaskCreateRequest | Dict[str, Any]</code> <p>The task data</p> required <p>Returns:</p> Type Description <code>TaskResponse</code> <p>The response JSON (see TaskResponse for details)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def create_task(\n    self,\n    task_data: TaskCreateRequest | Dict[str, Any],\n) -&gt; TaskResponse:\n    \"\"\"Trigger a new task synchronously.\n\n    Parameters\n    ----------\n    task_data : TaskCreateRequest | Dict[str, Any]\n        The task data\n\n    Returns\n    -------\n    TaskResponse\n        The response JSON\n        (see TaskResponse for details)\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    if isinstance(task_data, dict):\n        task_data = TaskCreateRequest.model_validate(task_data)\n    file_data = task_data.file_data\n    file_name = task_data.file_name\n    input_timeout = task_data.input_timeout\n    if isinstance(file_data, BytesIO):\n        # If file_data is a BytesIO object, read its content\n        file_data = file_data.getvalue()\n    response = self.tasks.create_task(  # type: ignore\n        file_data,\n        file_name,\n        input_timeout=input_timeout,\n    )\n    return TaskResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.delete_task","title":"<code>delete_task(task_id: str, force: bool = False) -&gt; None</code>","text":"<p>Delete a task synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID</p> required <code>force</code> <code>bool</code> <p>Whether to force delete the task (even if active), by default False</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def delete_task(self, task_id: str, force: bool = False) -&gt; None:\n    \"\"\"Delete a task synchronously.\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID\n    force : bool, optional\n        Whether to force delete the task (even if active), by default False\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    self.tasks.delete_task(task_id, force=force)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.delete_tasks","title":"<code>delete_tasks(ids: List[str] | None = None, force: bool = False) -&gt; None</code>","text":"<p>Delete multiple tasks synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>List[str] | None</code> <p>The list of task IDs to delete, by default None</p> <code>None</code> <code>force</code> <code>bool</code> <p>Whether to force delete the tasks (even if active), by default False</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def delete_tasks(\n    self,\n    ids: List[str] | None = None,\n    force: bool = False,\n) -&gt; None:\n    \"\"\"Delete multiple tasks synchronously.\n\n    Parameters\n    ----------\n    ids : List[str] | None, optional\n        The list of task IDs to delete, by default None\n    force : bool, optional\n        Whether to force delete the tasks (even if active), by default False\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    self.tasks.delete_tasks(ids=ids, force=force)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.download_task_results","title":"<code>download_task_results(task_id: str) -&gt; bytes</code>","text":"<p>Download a completed task's results archive.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID</p> required <p>Returns:</p> Type Description <code>bytes</code> <p>The results archive</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def download_task_results(self, task_id: str) -&gt; bytes:\n    \"\"\"Download a completed task's results archive.\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID\n\n    Returns\n    -------\n    bytes\n        The results archive\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    return self.tasks.download_task_results(task_id)  # type: ignore\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.get_task_status","title":"<code>get_task_status(task_id: str) -&gt; TaskResponse</code>","text":"<p>Retrieve the status of a task synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>The response JSON</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def get_task_status(self, task_id: str) -&gt; TaskResponse:\n    \"\"\"Retrieve the status of a task synchronously.\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID\n\n    Returns\n    -------\n    Dict[str, Any]\n        The response JSON\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    response = self.tasks.get_task_status(task_id)  # type: ignore\n    return TaskResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.is_listening","title":"<code>is_listening() -&gt; bool</code>","text":"<p>Check if the WebSocket listener is running.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the WebSocket listener is running</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def is_listening(self) -&gt; bool:\n    \"\"\"Check if the WebSocket listener is running.\n\n    Returns\n    -------\n    bool\n        Whether the WebSocket listener is running\n    \"\"\"\n    if self.ws_sync:\n        return self.ws_sync.is_listening()\n    return False\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.list_tasks","title":"<code>list_tasks(params: TaskItemsRequest | Dict[str, Any] | None = None) -&gt; TaskItemsResponse</code>","text":"<p>List tasks synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>TaskItemsRequest | Dict[str, Any] | None</code> <p>The query parameters for pagination, by default None (see TaskItemsRequest for details)</p> <code>None</code> <p>Returns:</p> Type Description <code>TaskItemsResponse</code> <p>The response JSON (see TaskItemsResponse for details)</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def list_tasks(\n    self,\n    params: TaskItemsRequest | Dict[str, Any] | None = None,\n) -&gt; TaskItemsResponse:\n    \"\"\"List tasks synchronously.\n\n    Parameters\n    ----------\n    params : TaskItemsRequest | Dict[str, Any] | None, optional\n        The query parameters for pagination, by default None\n        (see TaskItemsRequest for details)\n\n    Returns\n    -------\n    TaskItemsResponse\n        The response JSON\n        (see TaskItemsResponse for details)\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    params_dict: Dict[str, Any] | None\n    if params is None:\n        params_dict = None\n    elif isinstance(params, dict):\n        params_dict = TaskItemsRequest.model_validate(params).model_dump(\n            exclude_none=True\n        )\n    else:\n        params_dict = params.model_dump(exclude_none=True)\n    response = self.tasks.list_tasks(params_dict)  # type: ignore\n    return TaskItemsResponse.model_validate(response)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.send_user_input","title":"<code>send_user_input(request_data: UserInputRequest | Dict[str, Any], use_rest: bool = False) -&gt; None</code>","text":"<p>Send user input to a task synchronously.</p> <p>Parameters:</p> Name Type Description Default <code>request_data</code> <code>UserInputRequest | Dict[str, Any]</code> <p>The user input request data</p> required <code>use_rest</code> <code>bool</code> <p>Whether to use REST API instead of first trying WebSocket, by default False</p> <code>False</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def send_user_input(\n    self,\n    request_data: UserInputRequest | Dict[str, Any],\n    use_rest: bool = False,\n) -&gt; None:\n    \"\"\"Send user input to a task synchronously.\n\n    Parameters\n    ----------\n    request_data : UserInputRequest | Dict[str, Any]\n        The user input request data\n    use_rest : bool, optional\n        Whether to use REST API instead of first trying WebSocket,\n        by default False\n\n    Raises\n    ------\n    ValueError\n        If the client is not configured\n    \"\"\"\n    self._ensure_configured()\n    if isinstance(request_data, dict):\n        request_data = UserInputRequest.model_validate(request_data)\n    task_id = request_data.task_id\n    user_input = request_data.data\n    request_id = request_data.request_id\n    sent = False\n    if use_rest is False:  # pragma: no branch\n        # first check/try using websockets\n        if self.ws_sync and self.ws_sync.is_listening():\n            message = {\n                \"data\": user_input,\n                \"request_id\": request_id,\n            }\n            # pylint: disable=broad-exception-caught\n            try:\n                self.ws_sync.send(task_id, json.dumps(message))\n                sent = True\n            except BaseException as e:  # pragma: no cover\n                self._handle_error(\n                    f\"Error sending user input via WebSocket: {e}\"\n                )\n    if not sent:\n        self.tasks.send_user_input(  # type: ignore\n            task_id=task_id,\n            user_input=user_input,\n            request_id=request_id,\n        )\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.start_ws_async_listener","title":"<code>start_ws_async_listener(task_id: str, on_message: Callable[[str], Coroutine[Any, Any, None]], on_error: Callable[[str], Coroutine[Any, Any, None]] | None = None, in_task: bool = True) -&gt; None</code>  <code>async</code>","text":"<p>Start listening to the WebSocket (async).</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID to use for the WebSocket connection</p> required <code>on_message</code> <code>Callable[[str], Coroutine[Any, Any, None]]</code> <p>The function to call when a message is received</p> required <code>on_error</code> <code>Callable[[str], Coroutine[Any, Any, None]]</code> <p>The function to call on error, by default None</p> <code>None</code> <code>in_task</code> <code>bool</code> <p>Whether to run in a task, by default True</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the WebSocket client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def start_ws_async_listener(\n    self,\n    task_id: str,\n    on_message: Callable[[str], Coroutine[Any, Any, None]],\n    on_error: Callable[[str], Coroutine[Any, Any, None]] | None = None,\n    in_task: bool = True,\n) -&gt; None:\n    \"\"\"Start listening to the WebSocket (async).\n\n    Parameters\n    ----------\n    task_id : str\n        The task ID to use for the WebSocket connection\n    on_message : Callable[[str], Coroutine[Any, Any, None]]\n        The function to call when a message is received\n    on_error : Callable[[str], Coroutine[Any, Any, None]], optional\n        The function to call on error, by default None\n    in_task : bool, optional\n        Whether to run in a task, by default True\n\n    Raises\n    ------\n    ValueError\n        If the WebSocket client is not configured\n    \"\"\"\n    if not self.ws_async:\n        raise ValueError(\n            \"WebSockets are not configured. Call `configure()` first.\"\n        )\n    if await self.a_is_listening():\n        return\n    await self.ws_async.listen(\n        task_id=task_id,\n        on_message=on_message,\n        on_error=on_error,\n        in_task=in_task,\n    )\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.start_ws_listener","title":"<code>start_ws_listener(task_id: str, on_message: Callable[[str], None], on_error: Callable[[str], None] | None = None, in_thread: bool = True) -&gt; None</code>","text":"<p>Start listening to the WebSocket (sync).</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The task ID to use for the WebSocket connection</p> required <code>on_message</code> <code>Callable[[str], None]</code> <p>The function to call when a message is received</p> required <code>on_error</code> <code>Callable[[str], None]</code> <p>The function to call on error, by default None</p> <code>None</code> <code>in_thread</code> <code>bool</code> <p>Whether to run in a thread, by default True</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the WebSocket client is not configured</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def start_ws_listener(\n    self,\n    task_id: str,\n    on_message: Callable[[str], None],\n    on_error: Callable[[str], None] | None = None,\n    in_thread: bool = True,\n) -&gt; None:\n    \"\"\"Start listening to the WebSocket (sync).\n\n    Parameters\n    ----------\n    task_id: str\n        The task ID to use for the WebSocket connection\n    on_message : Callable[[str], None]\n        The function to call when a message is received\n    on_error : Callable[[str], None], optional\n        The function to call on error, by default None\n    in_thread : bool, optional\n        Whether to run in a thread, by default True\n\n    Raises\n    ------\n    ValueError\n        If the WebSocket client is not configured\n    \"\"\"\n    if not self.ws_sync:\n        raise ValueError(\n            \"WebSockets are not configured. Call `configure()` first.\"\n        )\n    if self.is_listening():\n        return\n    self.ws_sync.listen(\n        task_id=task_id,\n        on_message=on_message,\n        on_error=on_error,\n        in_thread=in_thread,\n    )\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.stop_ws_async_listener","title":"<code>stop_ws_async_listener() -&gt; None</code>  <code>async</code>","text":"<p>Stop the WebSocket listener (async).</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>async def stop_ws_async_listener(self) -&gt; None:\n    \"\"\"Stop the WebSocket listener (async).\"\"\"\n    if self.ws_async:  # pragma: no branch\n        await self.ws_async.stop()\n        self.ws_async = None\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.tasks_client.TasksClient.stop_ws_listener","title":"<code>stop_ws_listener() -&gt; None</code>","text":"<p>Stop the WebSocket listener (sync).</p> Source code in <code>waldiez_runner/client/tasks_client.py</code> <pre><code>def stop_ws_listener(self) -&gt; None:\n    \"\"\"Stop the WebSocket listener (sync).\"\"\"\n    if self.ws_sync:  # pragma: no branch\n        self.ws_sync.stop()\n        self.ws_sync = None\n</code></pre>"},{"location":"reference/client/#authentication","title":"Authentication","text":"<p>Custom authentication for the Waldiez Runner client.</p>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth","title":"<code>Auth(base_url: str | None = None, on_error: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None, on_token: Callable[[str], None] | Callable[[str], Coroutine[Any, Any, None]] | None = None)</code>","text":"<p>               Bases: <code>Auth</code></p> <p>Custom authentication class.</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>def __init__(\n    self,\n    base_url: str | None = None,\n    on_error: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n    on_token: (\n        Callable[[str], None]\n        | Callable[[str], Coroutine[Any, Any, None]]\n        | None\n    ) = None,\n) -&gt; None:\n    \"\"\"Initialize the authentication class.\"\"\"\n    self._sync_lock = threading.RLock()\n    self._async_lock = asyncio.Lock()\n    self._base_url = get_default_base_url(base_url) if base_url else None\n    self._client_id: str | None = None\n    self._client_secret: str | None = None\n    self._tokens_response: TokensResponse | None = None\n    self.on_error = on_error\n    self.on_token = on_token\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.async_auth_flow","title":"<code>async_auth_flow(request: httpx.Request) -&gt; AsyncGenerator[httpx.Request, httpx.Response]</code>  <code>async</code>","text":"<p>Attach the access token for async requests.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request</p> required <p>Yields:</p> Type Description <code>AsyncGenerator[Request, Response]</code> <p>The request with the access token</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>async def async_auth_flow(\n    self, request: httpx.Request\n) -&gt; AsyncGenerator[httpx.Request, httpx.Response]:\n    \"\"\"Attach the access token for async requests.\n\n    Parameters\n    ----------\n    request : httpx.Request\n        The request\n\n    Yields\n    -------\n    AsyncGenerator[httpx.Request, httpx.Response]\n        The request with the access token\n    \"\"\"\n    request.headers[\"Authorization\"] = (\n        f\"Bearer {await self.async_get_token()}\"\n    )\n    yield request\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.async_get_token","title":"<code>async_get_token(force: bool = False) -&gt; str | None</code>  <code>async</code>","text":"<p>Get a valid access token (asynchronous).</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>Force a new token fetch, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>(str, optional)</code> <p>The access token, or None if not available</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>async def async_get_token(self, force: bool = False) -&gt; str | None:\n    \"\"\"Get a valid access token (asynchronous).\n\n    Parameters\n    ----------\n    force : bool, optional\n        Force a new token fetch, by default False\n    Returns\n    -------\n    str, optional\n        The access token, or None if not available\n    \"\"\"\n    async with self._async_lock:\n        if force:\n            await self._async_fetch_token()\n            if (\n                not self._tokens_response\n                or not self._tokens_response.access_token\n            ):  # pragma: no cover\n                return None\n            return self._tokens_response.access_token\n        if not self._tokens_response or self.is_token_expired():\n            if self.is_refresh_token_expired():\n                await self._async_fetch_token()\n            else:  # pragma: no cover\n                await self._async_refresh_access_token()\n        if (\n            not self._tokens_response\n            or not self._tokens_response.access_token\n        ):\n            return None\n        return self._tokens_response.access_token\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.base_url","title":"<code>base_url: str | None</code>  <code>property</code>","text":"<p>Get the base URL.</p> <p>Returns:</p> Type Description <code>str</code> <p>The base URL</p>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.client_id","title":"<code>client_id: str | None</code>  <code>property</code>","text":"<p>Get the client ID.</p> <p>Returns:</p> Type Description <code>str</code> <p>The client ID</p>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.client_secret","title":"<code>client_secret: str | None</code>  <code>property</code>","text":"<p>Get the client secret.</p> <p>Returns:</p> Type Description <code>str</code> <p>The client secret</p>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.configure","title":"<code>configure(client_id: str, client_secret: str, base_url: str | None = None) -&gt; None</code>","text":"<p>Set the client ID and secret.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID</p> required <code>client_secret</code> <code>str</code> <p>The client secret</p> required <code>base_url</code> <code>str</code> <p>The base URL (if not set in the constructor), by default None</p> <code>None</code> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>def configure(\n    self, client_id: str, client_secret: str, base_url: str | None = None\n) -&gt; None:\n    \"\"\"Set the client ID and secret.\n\n    Parameters\n    ----------\n    client_id : str\n        The client ID\n    client_secret : str\n        The client secret\n    base_url : str, optional\n        The base URL (if not set in the constructor), by default None\n    \"\"\"\n    self._client_id = client_id\n    self._client_secret = client_secret\n    if base_url is not None:\n        self._base_url = get_default_base_url(base_url)\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.has_valid_token","title":"<code>has_valid_token() -&gt; bool</code>","text":"<p>Check if the access token is valid.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token is valid, False otherwise</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>def has_valid_token(self) -&gt; bool:\n    \"\"\"Check if the access token is valid.\n\n    Returns\n    -------\n    bool\n        True if the token is valid, False otherwise\n    \"\"\"\n    return bool(self._tokens_response) and not self.is_token_expired()\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.is_refresh_token_expired","title":"<code>is_refresh_token_expired() -&gt; bool</code>","text":"<p>Check if the refresh token is expired.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token is expired, False otherwise</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>def is_refresh_token_expired(self) -&gt; bool:\n    \"\"\"Check if the refresh token is expired.\n\n    Returns\n    -------\n    bool\n        True if the token is expired, False otherwise\n    \"\"\"\n    return self._is_expired(\"refresh_expires_at\")\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.is_token_expired","title":"<code>is_token_expired() -&gt; bool</code>","text":"<p>Check if the access token is expired.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token is expired, False otherwise</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>def is_token_expired(self) -&gt; bool:\n    \"\"\"Check if the access token is expired.\n\n    Returns\n    -------\n    bool\n        True if the token is expired, False otherwise\n    \"\"\"\n    return self._is_expired(\"expires_at\")\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.refresh_token_endpoint","title":"<code>refresh_token_endpoint: str | None</code>  <code>property</code>","text":"<p>Get the refresh token endpoint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The refresh token endpoint</p>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.sync_auth_flow","title":"<code>sync_auth_flow(request: httpx.Request) -&gt; Generator[httpx.Request, httpx.Response, None]</code>","text":"<p>Attach the access token for sync requests.</p> <p>Parameters:</p> Name Type Description Default <code>request</code> <code>Request</code> <p>The request</p> required <p>Yields:</p> Type Description <code>Generator[Request, Response, None]</code> <p>The request with the access token</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>def sync_auth_flow(\n    self, request: httpx.Request\n) -&gt; Generator[httpx.Request, httpx.Response, None]:\n    \"\"\"Attach the access token for sync requests.\n\n    Parameters\n    ----------\n    request : httpx.Request\n        The request\n\n    Yields\n    -------\n    Generator[httpx.Request, httpx.Response, None]\n        The request with the access token\n    \"\"\"\n    request.headers[\"Authorization\"] = f\"Bearer {self.sync_get_token()}\"\n    yield request\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.sync_get_token","title":"<code>sync_get_token(force: bool = False) -&gt; str | None</code>","text":"<p>Get a valid access token (synchronous).</p> <p>Parameters:</p> Name Type Description Default <code>force</code> <code>bool</code> <p>Force a new token fetch, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>(str, optional)</code> <p>The access token, or None if not available</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>def sync_get_token(self, force: bool = False) -&gt; str | None:\n    \"\"\"Get a valid access token (synchronous).\n\n    Parameters\n    ----------\n    force : bool, optional\n        Force a new token fetch, by default False\n    Returns\n    -------\n    str, optional\n        The access token, or None if not available\n    \"\"\"\n    with self._sync_lock:\n        if force:\n            self._fetch_token()\n            if not self._tokens_response:  # pragma: no cover\n                return None\n            return self._tokens_response.access_token\n        if not self._tokens_response or self.is_token_expired():\n            if self.is_refresh_token_expired():\n                self._fetch_token()\n            else:\n                self._refresh_access_token()\n        if (\n            not self._tokens_response\n            or not self._tokens_response.access_token\n        ):\n            return None\n        return self._tokens_response.access_token\n</code></pre>"},{"location":"reference/client/#waldiez_runner.client.auth.Auth.token_endpoint","title":"<code>token_endpoint: str | None</code>  <code>property</code>","text":"<p>Get the token endpoint.</p> <p>Returns:</p> Type Description <code>str</code> <p>The token endpoint</p>"},{"location":"reference/client/#waldiez_runner.client.auth.get_default_base_url","title":"<code>get_default_base_url(passed_url: str) -&gt; str</code>","text":"<p>Get the default base URL.</p> <p>Parameters:</p> Name Type Description Default <code>passed_url</code> <code>str</code> <p>The passed URL</p> required <p>Returns:</p> Type Description <code>str</code> <p>The default base URL</p> Source code in <code>waldiez_runner/client/auth.py</code> <pre><code>def get_default_base_url(passed_url: str) -&gt; str:\n    \"\"\"Get the default base URL.\n\n    Parameters\n    ----------\n    passed_url : str\n        The passed URL\n\n    Returns\n    -------\n    str\n        The default base URL\n    \"\"\"\n    url_parts = urllib.parse.urlsplit(passed_url)\n    return f\"{url_parts.scheme}://{url_parts.netloc}\"\n</code></pre>"},{"location":"reference/client/#models","title":"Models","text":"<p>Models for the client and task responses.</p>"},{"location":"reference/client/#waldiez_runner.client.models.ClientAudience","title":"<code>ClientAudience = Literal['tasks-api', 'clients-api']</code>  <code>module-attribute</code>","text":"<p>The possible audiences for a client.</p>"},{"location":"reference/client/#waldiez_runner.client.models.ClientCreateRequest","title":"<code>ClientCreateRequest</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Request model for creating a new client.</p>"},{"location":"reference/client/#waldiez_runner.client.models.ClientCreateResponse","title":"<code>ClientCreateResponse</code>","text":"<p>               Bases: <code>ClientResponse</code></p> <p>Response model when a new client is created.</p>"},{"location":"reference/client/#waldiez_runner.client.models.ClientItemsRequest","title":"<code>ClientItemsRequest = PaginatedRequest</code>  <code>module-attribute</code>","text":"<p>Request model for listing clients.</p>"},{"location":"reference/client/#waldiez_runner.client.models.ClientItemsResponse","title":"<code>ClientItemsResponse = PaginatedResponse[ClientResponse]</code>  <code>module-attribute</code>","text":"<p>List of clients with pagination.</p>"},{"location":"reference/client/#waldiez_runner.client.models.ClientResponse","title":"<code>ClientResponse</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Base response model for a client.</p>"},{"location":"reference/client/#waldiez_runner.client.models.ModelBase","title":"<code>ModelBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base model to inherit.</p>"},{"location":"reference/client/#waldiez_runner.client.models.PaginatedRequest","title":"<code>PaginatedRequest</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Generic pagination request model.</p>"},{"location":"reference/client/#waldiez_runner.client.models.PaginatedResponse","title":"<code>PaginatedResponse</code>","text":"<p>               Bases: <code>ModelBase</code>, <code>Generic[Items]</code></p> <p>Paginated response structure used in Waldiez Runner.</p>"},{"location":"reference/client/#waldiez_runner.client.models.RefreshTokenRequest","title":"<code>RefreshTokenRequest</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Refresh token request.</p>"},{"location":"reference/client/#waldiez_runner.client.models.StatusResponse","title":"<code>StatusResponse</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Server status type.</p>"},{"location":"reference/client/#waldiez_runner.client.models.TaskCreateRequest","title":"<code>TaskCreateRequest</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Request model for creating a new task.</p>"},{"location":"reference/client/#waldiez_runner.client.models.TaskItemsRequest","title":"<code>TaskItemsRequest = PaginatedRequest</code>  <code>module-attribute</code>","text":"<p>Request model for listing tasks.</p>"},{"location":"reference/client/#waldiez_runner.client.models.TaskItemsResponse","title":"<code>TaskItemsResponse = PaginatedResponse[TaskResponse]</code>  <code>module-attribute</code>","text":"<p>List of tasks with pagination.</p>"},{"location":"reference/client/#waldiez_runner.client.models.TaskResponse","title":"<code>TaskResponse</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Response returned when interacting with tasks.</p>"},{"location":"reference/client/#waldiez_runner.client.models.TaskStatus","title":"<code>TaskStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Possible task statuses.</p>"},{"location":"reference/client/#waldiez_runner.client.models.TokensRequest","title":"<code>TokensRequest</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Token request.</p>"},{"location":"reference/client/#waldiez_runner.client.models.TokensResponse","title":"<code>TokensResponse</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Tokens response.</p>"},{"location":"reference/client/#waldiez_runner.client.models.UserInputRequest","title":"<code>UserInputRequest</code>","text":"<p>               Bases: <code>ModelBase</code></p> <p>Request model for user input.</p>"},{"location":"reference/openapi/","title":"OpenAPI Docs","text":""},{"location":"reference/openapi/#waldiez-runner-043","title":"Waldiez Runner 0.4.3","text":"<p>Waldiez flows runner.</p> License: Apache 2.0"},{"location":"reference/openapi/#status","title":"Status","text":""},{"location":"reference/openapi/#get-status","title":"GET /status","text":"<p>Check application status</p> Description <p>Returns application health status, database status, etc.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"healthy\": true,\n    \"active_tasks\": 0,\n    \"pending_tasks\": 0,\n    \"max_capacity\": 0,\n    \"cpu_count\": null,\n    \"cpu_percent\": 10.12,\n    \"total_memory\": 0,\n    \"used_memory\": 0,\n    \"memory_percent\": 10.12\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"healthy\": {\n            \"type\": \"boolean\",\n            \"title\": \"Healthy\"\n        },\n        \"active_tasks\": {\n            \"type\": \"integer\",\n            \"title\": \"Active Tasks\"\n        },\n        \"pending_tasks\": {\n            \"type\": \"integer\",\n            \"title\": \"Pending Tasks\"\n        },\n        \"max_capacity\": {\n            \"type\": \"integer\",\n            \"title\": \"Max Capacity\"\n        },\n        \"cpu_count\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Cpu Count\"\n        },\n        \"cpu_percent\": {\n            \"type\": \"number\",\n            \"title\": \"Cpu Percent\"\n        },\n        \"total_memory\": {\n            \"type\": \"integer\",\n            \"title\": \"Total Memory\"\n        },\n        \"used_memory\": {\n            \"type\": \"integer\",\n            \"title\": \"Used Memory\"\n        },\n        \"memory_percent\": {\n            \"type\": \"number\",\n            \"title\": \"Memory Percent\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"healthy\",\n        \"active_tasks\",\n        \"pending_tasks\",\n        \"max_capacity\",\n        \"cpu_count\",\n        \"cpu_percent\",\n        \"total_memory\",\n        \"used_memory\",\n        \"memory_percent\"\n    ],\n    \"title\": \"ServerStatus\",\n    \"description\": \"Server status type.\"\n}\n</code></pre>"},{"location":"reference/openapi/#authentication","title":"Authentication","text":""},{"location":"reference/openapi/#post-authtoken","title":"POST /auth/token","text":"<p>Get a token for local authentication.</p> Description <p>Get a token for local authentication (only valid if local authentication is enabled).</p> <p>Request body</p> application/x-www-form-urlencoded <p><pre><code>{\n    \"client_id\": \"string\",\n    \"client_secret\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"properties\": {\n        \"client_id\": {\n            \"type\": \"string\",\n            \"title\": \"Client Id\",\n            \"examples\": [\n                \"\"\n            ]\n        },\n        \"client_secret\": {\n            \"type\": \"string\",\n            \"title\": \"Client Secret\",\n            \"examples\": [\n                \"\"\n            ]\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"client_id\",\n        \"client_secret\"\n    ],\n    \"title\": \"Body_get_token_auth_token_post\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"access_token\": \"string\",\n    \"refresh_token\": \"string\",\n    \"token_type\": \"string\",\n    \"expires_at\": \"2022-04-13T15:42:05.901Z\",\n    \"refresh_expires_at\": \"2022-04-13T15:42:05.901Z\",\n    \"audience\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\",\n            \"title\": \"Access Token\"\n        },\n        \"refresh_token\": {\n            \"type\": \"string\",\n            \"title\": \"Refresh Token\"\n        },\n        \"token_type\": {\n            \"type\": \"string\",\n            \"title\": \"Token Type\"\n        },\n        \"expires_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Expires At\"\n        },\n        \"refresh_expires_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Refresh Expires At\"\n        },\n        \"audience\": {\n            \"type\": \"string\",\n            \"title\": \"Audience\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"access_token\",\n        \"refresh_token\",\n        \"token_type\",\n        \"expires_at\",\n        \"refresh_expires_at\",\n        \"audience\"\n    ],\n    \"title\": \"TokensResponse\",\n    \"description\": \"Token response.\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#post-authtokenrefresh","title":"POST /auth/token/refresh","text":"<p>Refresh a token.</p> <p>Request body</p> application/json <p><pre><code>{\n    \"refresh_token\": \"string\",\n    \"audience\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"properties\": {\n        \"refresh_token\": {\n            \"type\": \"string\",\n            \"title\": \"Refresh Token\"\n        },\n        \"audience\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"items\": {\n                        \"type\": \"string\"\n                    },\n                    \"type\": \"array\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Audience\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"refresh_token\"\n    ],\n    \"title\": \"RefreshTokenRequest\",\n    \"description\": \"Refresh token request.\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"access_token\": \"string\",\n    \"refresh_token\": \"string\",\n    \"token_type\": \"string\",\n    \"expires_at\": \"2022-04-13T15:42:05.901Z\",\n    \"refresh_expires_at\": \"2022-04-13T15:42:05.901Z\",\n    \"audience\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"access_token\": {\n            \"type\": \"string\",\n            \"title\": \"Access Token\"\n        },\n        \"refresh_token\": {\n            \"type\": \"string\",\n            \"title\": \"Refresh Token\"\n        },\n        \"token_type\": {\n            \"type\": \"string\",\n            \"title\": \"Token Type\"\n        },\n        \"expires_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Expires At\"\n        },\n        \"refresh_expires_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Refresh Expires At\"\n        },\n        \"audience\": {\n            \"type\": \"string\",\n            \"title\": \"Audience\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"access_token\",\n        \"refresh_token\",\n        \"token_type\",\n        \"expires_at\",\n        \"refresh_expires_at\",\n        \"audience\"\n    ],\n    \"title\": \"TokensResponse\",\n    \"description\": \"Token response.\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#tasks","title":"Tasks","text":""},{"location":"reference/openapi/#get-apiv1tasks","title":"GET /api/v1/tasks","text":"<p>Get all client's tasks</p> Description <p>Get all client's tasks.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>page</code> query integer 1 No Page number <code>size</code> query integer 50 No Page size <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"items\": [\n        {\n            \"id\": \"string\",\n            \"created_at\": \"2022-04-13T15:42:05.901Z\",\n            \"updated_at\": \"2022-04-13T15:42:05.901Z\",\n            \"client_id\": \"string\",\n            \"flow_id\": \"string\",\n            \"filename\": \"string\",\n            \"status\": \"PENDING\",\n            \"input_timeout\": 0,\n            \"input_request_id\": null,\n            \"results\": null\n        }\n    ],\n    \"total\": null,\n    \"page\": null,\n    \"size\": null,\n    \"pages\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"items\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/TaskResponse\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Items\"\n        },\n        \"total\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0.0\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Total\"\n        },\n        \"page\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 1.0\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Page\"\n        },\n        \"size\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 1.0\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Size\"\n        },\n        \"pages\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0.0\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Pages\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"items\",\n        \"total\",\n        \"page\",\n        \"size\"\n    ],\n    \"title\": \"Page[TaskResponse]\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#post-apiv1tasks","title":"POST /api/v1/tasks","text":"<p>Create a task</p> Description <p>Create a task.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>input_timeout</code> query integer 180 No <p>Request body</p> multipart/form-data <p><pre><code>{\n    \"file\": \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQ=\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"properties\": {\n        \"file\": {\n            \"type\": \"string\",\n            \"format\": \"binary\",\n            \"title\": \"File\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"file\"\n    ],\n    \"title\": \"Body_create_task_api_v1_tasks_post\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"created_at\": \"2022-04-13T15:42:05.901Z\",\n    \"updated_at\": \"2022-04-13T15:42:05.901Z\",\n    \"client_id\": \"string\",\n    \"flow_id\": \"string\",\n    \"filename\": \"string\",\n    \"status\": \"PENDING\",\n    \"input_timeout\": 0,\n    \"input_request_id\": null,\n    \"results\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"title\": \"Id\"\n        },\n        \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Created At\"\n        },\n        \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Updated At\"\n        },\n        \"client_id\": {\n            \"type\": \"string\",\n            \"title\": \"Client Id\"\n        },\n        \"flow_id\": {\n            \"type\": \"string\",\n            \"title\": \"Flow Id\"\n        },\n        \"filename\": {\n            \"type\": \"string\",\n            \"title\": \"Filename\"\n        },\n        \"status\": {\n            \"$ref\": \"#/components/schemas/TaskStatus\"\n        },\n        \"input_timeout\": {\n            \"type\": \"integer\",\n            \"title\": \"Input Timeout\"\n        },\n        \"input_request_id\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Input Request Id\"\n        },\n        \"results\": {\n            \"anyOf\": [\n                {\n                    \"additionalProperties\": true,\n                    \"type\": \"object\"\n                },\n                {\n                    \"items\": {\n                        \"additionalProperties\": true,\n                        \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Results\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"id\",\n        \"created_at\",\n        \"updated_at\",\n        \"client_id\",\n        \"flow_id\",\n        \"filename\",\n        \"status\",\n        \"input_timeout\",\n        \"input_request_id\",\n        \"results\"\n    ],\n    \"title\": \"TaskResponse\",\n    \"description\": \"Task response model.\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#delete-apiv1tasks","title":"DELETE /api/v1/tasks","text":"<p>Delete multiple tasks</p> Description <p>Delete multiple tasks for the current client</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>force</code> query None False No <code>ids</code> query None No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#get-apiv1taskstask_id","title":"GET /api/v1/tasks/{task_id}","text":"<p>Get a task by ID</p> Description <p>Get a task by ID for the current client</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>task_id</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"created_at\": \"2022-04-13T15:42:05.901Z\",\n    \"updated_at\": \"2022-04-13T15:42:05.901Z\",\n    \"client_id\": \"string\",\n    \"flow_id\": \"string\",\n    \"filename\": \"string\",\n    \"status\": \"PENDING\",\n    \"input_timeout\": 0,\n    \"input_request_id\": null,\n    \"results\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"title\": \"Id\"\n        },\n        \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Created At\"\n        },\n        \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Updated At\"\n        },\n        \"client_id\": {\n            \"type\": \"string\",\n            \"title\": \"Client Id\"\n        },\n        \"flow_id\": {\n            \"type\": \"string\",\n            \"title\": \"Flow Id\"\n        },\n        \"filename\": {\n            \"type\": \"string\",\n            \"title\": \"Filename\"\n        },\n        \"status\": {\n            \"$ref\": \"#/components/schemas/TaskStatus\"\n        },\n        \"input_timeout\": {\n            \"type\": \"integer\",\n            \"title\": \"Input Timeout\"\n        },\n        \"input_request_id\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Input Request Id\"\n        },\n        \"results\": {\n            \"anyOf\": [\n                {\n                    \"additionalProperties\": true,\n                    \"type\": \"object\"\n                },\n                {\n                    \"items\": {\n                        \"additionalProperties\": true,\n                        \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Results\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"id\",\n        \"created_at\",\n        \"updated_at\",\n        \"client_id\",\n        \"flow_id\",\n        \"filename\",\n        \"status\",\n        \"input_timeout\",\n        \"input_request_id\",\n        \"results\"\n    ],\n    \"title\": \"TaskResponse\",\n    \"description\": \"Task response model.\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#delete-apiv1taskstask_id","title":"DELETE /api/v1/tasks/{task_id}","text":"<p>Delete a task</p> Description <p>Delete a task by ID for the current client</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>force</code> query None False No <code>task_id</code> path string No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#post-apiv1taskstask_idinput","title":"POST /api/v1/tasks/{task_id}/input","text":"<p>On Input Request</p> Description <p>Task input</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>task_id</code> path string No <p>Request body</p> application/json <p><pre><code>{\n    \"request_id\": \"string\",\n    \"data\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"properties\": {\n        \"request_id\": {\n            \"type\": \"string\",\n            \"title\": \"Request Id\"\n        },\n        \"data\": {\n            \"type\": \"string\",\n            \"title\": \"Data\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"request_id\",\n        \"data\"\n    ],\n    \"title\": \"InputResponse\",\n    \"description\": \"Input response model.\"\n}\n</code></pre> <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#parameters","title":"Parameters","text":"<p>task_id : str     The task ID. message : InputResponse     The input response message. background_tasks : BackgroundTasks     The background tasks. db_session : AsyncSession     The database session. client_id : str     The client ID.</p>"},{"location":"reference/openapi/#returns","title":"Returns","text":"<p>Response     The response (status code 204).</p>"},{"location":"reference/openapi/#raises","title":"Raises","text":"<p>HTTPException     If the message or the task_id is invalid.</p>"},{"location":"reference/openapi/#get-apiv1taskstask_iddownload","title":"GET /api/v1/tasks/{task_id}/download","text":"<p>Download a task archive</p> Description <p>Download a task archive by ID for the current client</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>task_id</code> path string No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#post-apiv1taskstask_idcancel","title":"POST /api/v1/tasks/{task_id}/cancel","text":"<p>Cancel a task</p> Description <p>Cancel a task by ID for the current client</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>task_id</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"created_at\": \"2022-04-13T15:42:05.901Z\",\n    \"updated_at\": \"2022-04-13T15:42:05.901Z\",\n    \"client_id\": \"string\",\n    \"flow_id\": \"string\",\n    \"filename\": \"string\",\n    \"status\": \"PENDING\",\n    \"input_timeout\": 0,\n    \"input_request_id\": null,\n    \"results\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"title\": \"Id\"\n        },\n        \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Created At\"\n        },\n        \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Updated At\"\n        },\n        \"client_id\": {\n            \"type\": \"string\",\n            \"title\": \"Client Id\"\n        },\n        \"flow_id\": {\n            \"type\": \"string\",\n            \"title\": \"Flow Id\"\n        },\n        \"filename\": {\n            \"type\": \"string\",\n            \"title\": \"Filename\"\n        },\n        \"status\": {\n            \"$ref\": \"#/components/schemas/TaskStatus\"\n        },\n        \"input_timeout\": {\n            \"type\": \"integer\",\n            \"title\": \"Input Timeout\"\n        },\n        \"input_request_id\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Input Request Id\"\n        },\n        \"results\": {\n            \"anyOf\": [\n                {\n                    \"additionalProperties\": true,\n                    \"type\": \"object\"\n                },\n                {\n                    \"items\": {\n                        \"additionalProperties\": true,\n                        \"type\": \"object\"\n                    },\n                    \"type\": \"array\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Results\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"id\",\n        \"created_at\",\n        \"updated_at\",\n        \"client_id\",\n        \"flow_id\",\n        \"filename\",\n        \"status\",\n        \"input_timeout\",\n        \"input_request_id\",\n        \"results\"\n    ],\n    \"title\": \"TaskResponse\",\n    \"description\": \"Task response model.\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#clients","title":"Clients","text":""},{"location":"reference/openapi/#get-apiv1clients","title":"GET /api/v1/clients","text":"<p>Get all clients</p> Description <p>Get all clients.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>page</code> query integer 1 No Page number <code>size</code> query integer 50 No Page size <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"items\": [\n        {\n            \"id\": \"string\",\n            \"client_id\": \"string\",\n            \"audience\": \"string\",\n            \"name\": \"string\",\n            \"description\": null,\n            \"created_at\": \"2022-04-13T15:42:05.901Z\",\n            \"updated_at\": \"2022-04-13T15:42:05.901Z\"\n        }\n    ],\n    \"total\": null,\n    \"page\": null,\n    \"size\": null,\n    \"pages\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"items\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ClientResponse\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Items\"\n        },\n        \"total\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0.0\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Total\"\n        },\n        \"page\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 1.0\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Page\"\n        },\n        \"size\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 1.0\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Size\"\n        },\n        \"pages\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"integer\",\n                    \"minimum\": 0.0\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Pages\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"items\",\n        \"total\",\n        \"page\",\n        \"size\"\n    ],\n    \"title\": \"Page[ClientResponse]\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#post-apiv1clients","title":"POST /api/v1/clients","text":"<p>Create a client</p> Description <p>Create a new client.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <p>Request body</p> application/json <p><pre><code>{\n    \"client_id\": \"string\",\n    \"plain_secret\": \"string\",\n    \"audience\": \"string\",\n    \"name\": \"string\",\n    \"description\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"properties\": {\n        \"client_id\": {\n            \"type\": \"string\",\n            \"title\": \"Client Id\"\n        },\n        \"plain_secret\": {\n            \"type\": \"string\",\n            \"title\": \"Plain Secret\"\n        },\n        \"audience\": {\n            \"type\": \"string\",\n            \"title\": \"Audience\",\n            \"default\": \"tasks-api\"\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"title\": \"Name\",\n            \"default\": \"Default\"\n        },\n        \"description\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Description\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"ClientCreate\",\n    \"description\": \"Client create model.\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"client_id\": \"string\",\n    \"audience\": \"string\",\n    \"name\": \"string\",\n    \"description\": null,\n    \"created_at\": \"2022-04-13T15:42:05.901Z\",\n    \"updated_at\": \"2022-04-13T15:42:05.901Z\",\n    \"client_secret\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"title\": \"Id\"\n        },\n        \"client_id\": {\n            \"type\": \"string\",\n            \"title\": \"Client Id\"\n        },\n        \"audience\": {\n            \"type\": \"string\",\n            \"title\": \"Audience\"\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"title\": \"Name\"\n        },\n        \"description\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Description\"\n        },\n        \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Created At\"\n        },\n        \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Updated At\"\n        },\n        \"client_secret\": {\n            \"type\": \"string\",\n            \"title\": \"Client Secret\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"id\",\n        \"client_id\",\n        \"audience\",\n        \"name\",\n        \"description\",\n        \"created_at\",\n        \"updated_at\",\n        \"client_secret\"\n    ],\n    \"title\": \"ClientCreateResponse\",\n    \"description\": \"Client create response model.\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#delete-apiv1clients","title":"DELETE /api/v1/clients","text":"<p>Delete multiple clients</p> Description <p>Delete multiple clients.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>audiences</code> query None No <code>excluded</code> query None No <code>ids</code> query None No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#get-apiv1clientsclient_id","title":"GET /api/v1/clients/{client_id}","text":"<p>Get a client</p> Description <p>Get a client by ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>client_id</code> path string No <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"client_id\": \"string\",\n    \"audience\": \"string\",\n    \"name\": \"string\",\n    \"description\": null,\n    \"created_at\": \"2022-04-13T15:42:05.901Z\",\n    \"updated_at\": \"2022-04-13T15:42:05.901Z\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"title\": \"Id\"\n        },\n        \"client_id\": {\n            \"type\": \"string\",\n            \"title\": \"Client Id\"\n        },\n        \"audience\": {\n            \"type\": \"string\",\n            \"title\": \"Audience\"\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"title\": \"Name\"\n        },\n        \"description\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Description\"\n        },\n        \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Created At\"\n        },\n        \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Updated At\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"id\",\n        \"client_id\",\n        \"audience\",\n        \"name\",\n        \"description\",\n        \"created_at\",\n        \"updated_at\"\n    ],\n    \"title\": \"ClientResponse\",\n    \"description\": \"Client response model.\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#patch-apiv1clientsclient_id","title":"PATCH /api/v1/clients/{client_id}","text":"<p>Update a client</p> Description <p>Update a client by ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>client_id</code> path string No <p>Request body</p> application/json <p><pre><code>{\n    \"name\": null,\n    \"description\": null\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"properties\": {\n        \"name\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Name\"\n        },\n        \"description\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Description\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"ClientUpdate\",\n    \"description\": \"Client update model.\"\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": \"string\",\n    \"client_id\": \"string\",\n    \"audience\": \"string\",\n    \"name\": \"string\",\n    \"description\": null,\n    \"created_at\": \"2022-04-13T15:42:05.901Z\",\n    \"updated_at\": \"2022-04-13T15:42:05.901Z\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"id\": {\n            \"type\": \"string\",\n            \"title\": \"Id\"\n        },\n        \"client_id\": {\n            \"type\": \"string\",\n            \"title\": \"Client Id\"\n        },\n        \"audience\": {\n            \"type\": \"string\",\n            \"title\": \"Audience\"\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"title\": \"Name\"\n        },\n        \"description\": {\n            \"anyOf\": [\n                {\n                    \"type\": \"string\"\n                },\n                {\n                    \"type\": \"null\"\n                }\n            ],\n            \"title\": \"Description\"\n        },\n        \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Created At\"\n        },\n        \"updated_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\",\n            \"title\": \"Updated At\"\n        }\n    },\n    \"type\": \"object\",\n    \"required\": [\n        \"id\",\n        \"client_id\",\n        \"audience\",\n        \"name\",\n        \"description\",\n        \"created_at\",\n        \"updated_at\"\n    ],\n    \"title\": \"ClientResponse\",\n    \"description\": \"Client response model.\"\n}\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#delete-apiv1clientsclient_id","title":"DELETE /api/v1/clients/{client_id}","text":"<p>Delete a client</p> Description <p>Delete a client by ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>HTTPBearer</code> header string N/A No JWT Bearer token <code>client_id</code> path string No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre> <p> Response 422 Unprocessable Entity </p> application/json <p><pre><code>{\n    \"detail\": [\n        {\n            \"loc\": [\n                null\n            ],\n            \"msg\": \"string\",\n            \"type\": \"string\"\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"properties\": {\n        \"detail\": {\n            \"items\": {\n                \"$ref\": \"#/components/schemas/ValidationError\"\n            },\n            \"type\": \"array\",\n            \"title\": \"Detail\"\n        }\n    },\n    \"type\": \"object\",\n    \"title\": \"HTTPValidationError\"\n}\n</code></pre>"},{"location":"reference/openapi/#schemas","title":"Schemas","text":""},{"location":"reference/openapi/#body_create_task_api_v1_tasks_post","title":"Body_create_task_api_v1_tasks_post","text":"Name Type <code>file</code> string(binary)"},{"location":"reference/openapi/#body_get_token_auth_token_post","title":"Body_get_token_auth_token_post","text":"Name Type <code>client_id</code> string <code>client_secret</code> string"},{"location":"reference/openapi/#clientcreate","title":"ClientCreate","text":"Name Type <code>audience</code> string <code>client_id</code> string <code>description</code> <code>name</code> string <code>plain_secret</code> string"},{"location":"reference/openapi/#clientcreateresponse","title":"ClientCreateResponse","text":"Name Type <code>audience</code> string <code>client_id</code> string <code>client_secret</code> string <code>created_at</code> string(date-time) <code>description</code> <code>id</code> string <code>name</code> string <code>updated_at</code> string(date-time)"},{"location":"reference/openapi/#clientresponse","title":"ClientResponse","text":"Name Type <code>audience</code> string <code>client_id</code> string <code>created_at</code> string(date-time) <code>description</code> <code>id</code> string <code>name</code> string <code>updated_at</code> string(date-time)"},{"location":"reference/openapi/#clientupdate","title":"ClientUpdate","text":"Name Type <code>description</code> <code>name</code>"},{"location":"reference/openapi/#httpvalidationerror","title":"HTTPValidationError","text":"Name Type <code>detail</code> Array&lt;ValidationError&gt;"},{"location":"reference/openapi/#inputresponse","title":"InputResponse","text":"Name Type <code>data</code> string <code>request_id</code> string"},{"location":"reference/openapi/#page_clientresponse_","title":"Page_ClientResponse_","text":"Name Type <code>items</code> Array&lt;ClientResponse&gt; <code>page</code> <code>pages</code> <code>size</code> <code>total</code>"},{"location":"reference/openapi/#page_taskresponse_","title":"Page_TaskResponse_","text":"Name Type <code>items</code> Array&lt;TaskResponse&gt; <code>page</code> <code>pages</code> <code>size</code> <code>total</code>"},{"location":"reference/openapi/#refreshtokenrequest","title":"RefreshTokenRequest","text":"Name Type <code>audience</code> <code>refresh_token</code> string"},{"location":"reference/openapi/#serverstatus","title":"ServerStatus","text":"Name Type <code>active_tasks</code> integer <code>cpu_count</code> <code>cpu_percent</code> number <code>healthy</code> boolean <code>max_capacity</code> integer <code>memory_percent</code> number <code>pending_tasks</code> integer <code>total_memory</code> integer <code>used_memory</code> integer"},{"location":"reference/openapi/#taskresponse","title":"TaskResponse","text":"Name Type <code>client_id</code> string <code>created_at</code> string(date-time) <code>filename</code> string <code>flow_id</code> string <code>id</code> string <code>input_request_id</code> <code>input_timeout</code> integer <code>results</code> <code>status</code> TaskStatus <code>updated_at</code> string(date-time)"},{"location":"reference/openapi/#taskstatus","title":"TaskStatus","text":"<p>Type: string</p>"},{"location":"reference/openapi/#tokensresponse","title":"TokensResponse","text":"Name Type <code>access_token</code> string <code>audience</code> string <code>expires_at</code> string(date-time) <code>refresh_expires_at</code> string(date-time) <code>refresh_token</code> string <code>token_type</code> string"},{"location":"reference/openapi/#validationerror","title":"ValidationError","text":"Name Type <code>loc</code> Array&lt;&gt; <code>msg</code> string <code>type</code> string"},{"location":"reference/openapi/#security-schemes","title":"Security schemes","text":"Name Type Scheme Description HTTPBearer http bearer"}]}