
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "waldiez_runner"
description = "Serve and run your Waldiez flows in isolated environments and stream logs/input/output via Redis"
authors = [
  { name = "Panagiotis Kasnesis", email = "pkasnesis@waldiez.io" },
  { name= "Lazaros Toumanidis", email= "laztoum@waldiez.io" },
  { name = "Stella Ioannidou", email = "stella@humancentered.gr"}
]
readme = "README.md"
requires-python = ">=3.11,<3.14"
dynamic = ["version"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
]
dependencies = [
    "aiocsv==1.3.2",
    "aiosqlite==0.21.0",
    "aiofiles==24.1.0",
    "aiohttp==3.11.18",
    "alembic==1.15.2",
    "anyio==4.9.0",
    "bcrypt==4.3.0",
    "fakeredis==2.28.1",
    "fastapi[all]==0.115.12",
    "fastapi-pagination==0.13.1",
    "faststream[redis,cli]==0.5.39",
    "hiredis==3.1.0",
    "nest-asyncio==1.6.0",
    "orjson==3.10.16",
    "psutil==7.0.0",
    "psycopg>=3.2.6; sys_platform == 'linux'",
    "psycopg>=3.2.6; sys_platform == 'win32' and platform_machine == 'arm64'",
    "psycopg>=3.2.6; sys_platform == 'win32' and platform_machine == 'ARM64'",
    "psycopg>=3.2.6; sys_platform == 'win32' and platform_machine == 'aarch64'",
    "psycopg>=3.2.6; sys_platform == 'win32' and platform_machine == 'AARCH64'",
    "psycopg[binary]>=3.2.6; sys_platform != 'linux' and platform_machine != 'arm64' and platform_machine != 'ARM64' and platform_machine != 'aarch64' and platform_machine != 'AARCH64'",
    "pydantic-settings==2.9.1",
    "pyJWT[crypto]==2.10.1",
    "pysqlite3-binary==0.5.4; sys_platform == 'linux' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
    "python_dotenv==1.1.0",
    "puremagic==1.29",
    "python-multipart==0.0.20",
    "redis<6",
    "slowapi==0.1.9",
    "pydantic>=2.11.3",
    "python-ulid==3.0.0",
    "taskiq==0.11.17",
    "taskiq-dependencies==1.5.7",
    "taskiq-redis==1.0.8",
    "tenacity<10.0.0",
    "typer<1",
    "uvicorn[standard]==0.34.2",
    "uvloop==0.21.0; sys_platform != 'win32'",
    "virtualenv==20.30.0",
    "waldiez==0.4.7",
    "zipstream==1.1.4",
]

[project.urls]
homepage = "https://github.com/waldiez/runner.git"
repository = "https://github.com/waldiez/runner.git"

[project.scripts]
waldiez-runner = "waldiez_runner.cli:app"

[tool.hatch.build.targets.sdist]
packages = ["waldiez_runner", "waldiez_runner.*"]
exclude = [ ".gitignore", "**/examples/**", "**/tests/**", "waldiez_runner/storage/**", "**waldiez_out/**" ]

[tool.hatch.build.targets.wheel]
packages = ["waldiez_runner", "waldiez_runner.*"]
exclude = [ ".gitignore", "**/examples/**", "**/tests/**", "waldiez_runner/storage/**", "**waldiez_out/**" ]

[project.optional-dependencies]
dev = [
    "autoflake==2.3.1",
    "bandit==1.8.3",
    "black[jupyter]==25.1.0",
    "flake8==7.2.0",
    "hatchling==1.27.0",
    "isort==6.0.1",
    "jupyter==1.1.1",
    "mypy==1.15.0",
    "pre-commit==4.2.0",
    "pydocstyle==6.3.0",
    "pylint==3.3.7",
    "ruff==0.11.8",
    "streamlit==1.45.0",
    "streamlit-autorefresh==1.0.1",
    "taskiq[reload]==0.11.17",
    "types-aiofiles==24.1.0.20250326",
    "types-redis==4.6.0.20241004",
    "types-requests==2.32.0.20250328",
    "types-psutil==7.0.0.20250401",
    "types-toml==0.10.8.20240310",
    "types-PyYAML==6.0.12.20250402",
    "yamllint==1.37.1",
]
test = [
    "asgi-lifespan==2.1.0",
    "greenlet==3.2.1",
    "httpx<1",
    "httpx_ws==0.7.2",
    "moto[s3]==5.1.4",
    "pytest==8.3.5",
    "pytest-asyncio==0.26.0",
    "pytest-cov==6.1.1",
    "pytest-html==4.1.1",
    "pytest-httpx",
    "pytest-env==1.1.5",
    "pytest-mock==3.14.0",
    "pytest-sugar==1.0.0",
    "pytest-timeout==2.4.0",
    "pytest-xdist==3.6.1",
]
docs = [
  'mdx-include==1.4.2',
  'mdx_truly_sane_lists==1.3',
  'mkdocs==1.6.1',
  'mkdocs-jupyter==0.25.1',
  'mkdocs-macros-plugin==1.3.7',
  'mkdocs-material==9.6.12',
  'mkdocs-mermaid2-plugin==1.2.1',
  'mkdocs-minify-html-plugin==0.3.1',
  'mkdocstrings[crystal,python]==0.29.1',
  'mkdocstrings-python==1.16.10',
  'neoteroi-mkdocs==1.1.2',
]

[tool.hatch.version]
path = "waldiez_runner/_version.py"

# black
[tool.black]
line-length = 80
skip-string-normalization=true
skip_magic_trailing_comma=false
include = '''
    \.pyi?$
'''
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | .local
  | _build
  | __init__.py
  | node_modules
  | waldiez_out
  | waldiez_runner/storage
  | docs/examples
)/
'''

# mypy
[tool.mypy]
files = "."
show_error_codes = true
# xcode/dmypy: follow-imports=silent not supported
# follow_imports = "skip"
platform = "linux"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = false
no_implicit_reexport = true
strict_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
plugins = [
  "pydantic.mypy"
]
exclude = [
    '.venv',
    '.local',
    'build',
    'dist',
    "node_modules",
    'waldiez_runner/storage',
    'waldiez_out',
    'migrations/versions',
    'docs/examples'
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = false

# isort
[tool.isort]
profile ="black"
skip=[
    ".venv",
    ".local",
    "build",
    "dist",
    "node_modules",
    "waldiez_out",
    "waldiez_runner/storage",
    "docs/examples",
]
include_trailing_comma=true
force_grid_wrap=0
use_parentheses=true
line_length=80

# pydocstyle
[tool.pydocstyle]
match-dir="([^!(.venv)].*)([^!(.local)].*)([^!(waldiez_out)].*)([^!(waldiez_runner/storage)].*)([^!(docs/examples)].*)"

# pylint
[tool.pylint.master]
load-plugins = [
    "pylint.extensions.mccabe",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.broad_try_clause",
    "pylint.extensions.no_self_use",
    "pylint.extensions.docparams",
]
extension-pkg-whitelist= []
# reports=true
recursive=true
fail-under=8.0
ignore=["CVS"]
ignore-paths = [
    ".venv",
    ".local*",
    ".*/node_modules/.*",
    "waldiez_out",
    "build",
    "dist",
    "waldiez_runner/storage",
    "docs/examples",
]
unsafe-load-any-extension="no"

[tool.pylint.messages_control]
enable=["c-extension-no-member"]
[tool.pylint.format]
max-line-length=80
[tool.pylint.similarities]
ignore-imports="yes"
ignore-signatures="yes"
min-similarity-lines=10
[tool.pylint.broad_try_clause]
max-try-statements=3
[tool.pylint.design]
max-args=11
max-attributes=11
max-positional-arguments=11
max-statements=50
[tool.pylint.string]
check-quote-consistency = true
check-str-concat-over-line-jumps = true
[tool.pylint.parameter_documentation]
accept-no-param-doc=false
accept-no-raise-doc=false
accept-no-return-doc=false
accept-no-yields-doc=false
# Possible choices: ["sphinx", "epytext", "google", "numpy", "default"]
default-docstring-type = "numpy"

# bandit
[tool.bandit]
exclude_dirs = [
    ".venv",
    ".local",
    "waldiez_out",
    "node_modules",
]
# B104: bind to all interfaces (0.0.0.0)
# B110: allow pass on try/except
# B404: allow import subprocess
# B602, B603: allow shell=True (subprocess,popen)
skips = ["B104", "B110", "B404", "B602", "B603" ]
[tool.bandit.assert_used]
skips = ["*/test_*.py", "*/*_test.py"]
# ruff
[tool.ruff]
line-length = 80
extend-exclude = [
    ".venv",
    ".local",
    "waldiez_out",
    "docs/examples",
    "waldiez_runner/storage",
    "node_modules",
]

[tool.ruff.lint]
select = ["E4", "E7", "E9", "F", "Q"]
ignore = []
# # Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# # Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# exclude = ["*.pyi", "*.j2"]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
line-ending = "lf"

# pytest
[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope="session"
# Let's toggle these form time to time
# to see if they still apply:
filterwarnings = [
    # DeprecationWarning: Type google._upb._message.MessageMapContainer \
    # uses PyType_Spec with a metaclass that has custom tp_new. \
    # This is deprecated and will no longer be allowed in Python 3.14.
    "ignore:.*google.*:DeprecationWarning",
    # UserWarning: Specifying 'lifespan_context' manually is no longer necessary with FastAPI >= 0.112.2.
    "ignore:.*lifespan_context.*:UserWarning",
    # ...._internal/_config.py:295: PydanticDeprecatedSince20: Support for class-based `config` is deprecated,
    # use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0.
    # See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
    # warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)
    "ignore:.*ConfigDict*:pydantic.PydanticDeprecatedSince20",
    # DeprecationWarning: jsonschema.RefResolver is deprecated as of v4.18.0, "
    "ignore:.*RefResolver.*:DeprecationWarning",
    # autogen/import_utils.py:45: DeprecationWarning:
    # Accessing jsonschema.__version__ is deprecated and will be removed in a future release.
    #  Use importlib.metadata directly to query for jsonschema's version.
    "ignore:.*jsonschema.__version__.*:DeprecationWarning",
]
python_files = [
    "tests.py",
    "test_*.py",
    "*_tests.py",
]
env = [
    "WALDIEZ_RUNNER_TESTING=1",
]
addopts = """
    --exitfirst \
    --durations=10 \
    --color=yes \
    --timeout=60
"""


# coverage
[tool.coverage.run]
# not needed, we use pytest-cov: --cov-context=test
# dynamic_context = "test_function"
omit = [
    ".venv/*",
    ".local/*",
    "waldiez_out/*",
    "waldiez_runner/storage/*",
    "node_modules/*",
]
branch = true
concurrency = ["greenlet", "thread"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "except ImportError:",
]
# fail_under = 80
precision = 2
